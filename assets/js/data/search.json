[ { "title": "메모", "url": "/posts/memo/", "categories": "etc, memo", "tags": "blog, jekyll, github, git", "date": "2022-09-21 00:00:00 +0900", "snippet": "https://www.youtube.com/watch?v=nT0pMg3tyYA숙제 (비건 유튜버)아래 사진을 클릭하면 제 취미공간으로 이어집니다 ㅎㅎ 여기에서 메모 및 일상을 기록하는데 놀러오실 분들은 언제나 환영합니다!링크로 이동하려면 사진을 클릭" }, { "title": "[네이버지도로 약국찾기 작업하면서 배운 것]", "url": "/posts/naver-map-api/", "categories": "etc, study", "tags": "study", "date": "2022-09-13 00:00:00 +0900", "snippet": " ✏️배운 것들   동기와 비동기 차이 구문 해석능력 괄호와 대괄호 차이 변수의 의미 1 동기function getLocation() { let XY = new Object(); if(navigator.geolocation) { navigator.geolocation.getCurrentPosition(function(position){ position.coords.latitude //위도 position.coords.longitude //경도 XY.lat = position.coords.latitude XY.lng = position.coords.longitude alert(\"위도\" + XY.lat); alert(\"경도\" + XY.lng); }); } return XY; }if부터 순차적으로 구문이 실행되고 나면 XY에는 위도와 경도가 있고그 값을 return 해줘서 반환해줬기 때문에 getLocation 함수가 실행되고나면 그 return된 값이 XY에 담겨서 제대로 출력 되겠다라고 생각하게 됨2 비동기function getLocation() { let XY = new Object(); if(navigator.geolocation) { navigator.geolocation.getCurrentPosition(function(position){ position.coords.latitude //위도 position.coords.longitude //경도 XY.lat = position.coords.latitude XY.lng = position.coords.longitude alert(\"위도\" + XY.lat); alert(\"경도\" + XY.lng); }); } return XY; }원래라면 이 if문이 실행이 다되고 나서 그 다음에 return XY로 오는데실제로 안그렇고 if문 안으로 들어왔을때 한 navigator.geolocation쯤왔을때 또 다른 프로세스가 return으로 와서 전체 if문이 실행되기 전에return으로 실행되어져 XY에는 값이 정해지지않은게 return됨 이게비동기식이다3 구문해석 $.ajax({ url: \"\", type: \"\", cache: \"\", dataType: \"\", data: \"\", sucess: function(data) { } });여기서 위의 dataType와 data는 밑의 succes랑 아무 연관이 없다밑의 (data)는 대괄호 안의 항목만 연동이됨4 괄호와 대괄호 차이인자가 단수일때는 그냥 괄호 하나() 혹은 복수일때는 대괄호로 ({})5 변수의 의미\tvar mapOptions = { \t\tcenter: new naver.maps.LatLng(37.5666805, 126.9784147), zoom: 9 }의미 : mapOptions라는 변수안에 저 내용들이 담긴 것보시고 미흡한 부분이 있다면 피드백은 언제나 환영합니다!아래 사진을 클릭하면 제 취미공간으로 이어집니다 ㅎㅎ 여기에서 메모 및 일상을 기록하는데 놀러오실 분들은 언제나 환영합니다!링크로 이동하려면 사진을 클릭참고‘지옥의불구덩이’      VSCode 오류 : 이 시스템에서 스크립트를 실행할 수 없으므로 …" }, { "title": "Node.js & 약국지도찾기, heroku 배포하기", "url": "/posts/pharmacy-heroku/", "categories": "developer-tools, api, Node.js", "tags": "api, nodejs, heroku", "date": "2022-09-13 00:00:00 +0900", "snippet": "‘소스놀이터’님의 유튜브영상을 보고 이렇게 좋은 작업물을 완성할 수 있었습니다.양질의 자료를 제공해주신 ‘소스놀이터’님께 다시한번 감사의 말씀을 드립니다.1   Heroku 회원가입create app 클릭heroku cli 클릭하면 이렇게 됩니다.이제 Node.js 클릭 -&gt; view as single page -&gt; 보이는 지침서 참고이제 cmd를 새로 켜서 따라 입력합시다heroku login자 사진에 보면 Opening browser to https://cli~~ 나오는데 이거 주소창에https 주소 복붙해서 한번 쳐주고 진행합시다 그러면 로그인 됩니다.이제node --versionnpm --versiongit --version확인합시다저는 노드 v16.17.0, npm 8.18.0, ‘git 2.37.1.windows.1’ 이렇군요.해당되는 앱이름 클릭 -&gt; setting -&gt; Heroku git URL 복사잠깐!로컬디스크C에 폴더 하나 HTML_SERVER_TEST 만듭시다그리고 windows + R을 눌러 CMD 입력해준후 이 경로로 옵시다cd .. 입력하면 경로 하나씩 줄어듭니다\\C:\\HTML_SERVER_TEST&gt; 저 경로에서git clone Heroku에 있는 URL입력합시다자 저의 경우는 그러면 이 경로로 빈 폴더가 생길겁니다.C:\\HTML_SERVER_TEST\\joonhwan-test이제 저 안에 index.js, public_html 폴더, package.json, public 폴더 복붙해줍시다그리고 package.json 수정해줍시다.{ \"name\": \"nodejs_pharmacy\", \"version\": \"1.0.0\", \"description\": \"\", \"main\": \"index.js\", \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\" }, \"author\": \"\", \"license\": \"ISC\", \"dependencies\": { \"axios\": \"^0.27.2\", \"express\": \"^4.18.1\" }}———– engines와 node 버젼 추가————&gt;{ \"name\": \"nodejs_pharmacy\", \"version\": \"1.0.0\", \"description\": \"\", \"main\": \"index.js\", \"engines\": { \"node\": \"16.x\" }, \"scripts\": { \"start\": \"node index.js\", \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\" }, \"author\": \"\", \"license\": \"ISC\", \"dependencies\": { \"axios\": \"^0.27.2\", \"express\": \"^4.18.1\" }}let port = process.env.PORT || 80;그리고 index.js에서 80을 5000으로 바꿔줍시다그 후 깃클론으로 폴더가 생성된 경로에서 아래 명령어 입력합시다저의 경우는 C:\\HTML_SERVER_TEST\\joonhwan-test 이곳에서 실행합니다npm install expressnpm install axios이제 node index.js 이어서 입력후 주소창에 http://localhost:5000/ 쳐봅시다.저는 잘 나오는 군요!참! 이거 휴대폰으로 지도 보면 확대할수록 글자 크기가 작아져서 해줘야하는게 있습니다index.html로 갑시다 거기서 &lt;head&gt; &lt;/head&gt;이 사이에 이 문장 추가하면 됩니다&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;이 문장을 추가해주면 휴대폰에서도 노트북에서 보는것과 같은 크기로 볼 수 있습니다.만약 이걸 추가 안할 시 휴대폰에서 확대할수록 크기는 더욱 작아집니다.이제 입력합시다.git add .git commit -m \"아무거나 입력\"git push origin master이 주소를 잘 확인했다면 console.ncloud.com -&gt; 마이페이지 -&gt; 아래사진을 봐주세요저 곳에 아까 그 주소 추가해줍시다. 그리고 테스트를 해보니 오잉?F12를 눌러봅시다아아 저거 제 아이디가 중복사용되고있었군요 바꿔주어야겠습니다. 실은 미리 하나 만들어놓고 테스트용으로 하나 더 만들어주었는데그 테스트용 아이디를 입력하지 않아서 생긴 문제입니다.수정을 완료하였으니 이제 저는 이미 배포한 앱을 지우고 새로 넣겠습니다heroku apps:destroy --app joonhwan-test // 그 후 자기 앱이름을 한번 더 입력하면 됩니다git status // 혹시 했는데 업데이트할 것이 아무것도 없다면 폴더를 바탕화면에 한번 옮겼다가 다시 재위치시켜보십시오아무것도 없으므로 폴더를 지우고 새로 만들었습니다. 그리고 cmd 껏다 켜주겠습니다heroku logingit clone URLcd joonhwan-test 입력해주고 그안에 자료들 다시 옮겨주고git statusgit add .git commit -m \"아무거나\"git push origin master노트북에서는 잘 나오군요! 휴대폰으로도 잘 나오는지 확인해봅시다! 이것으로 배포까지 끝내겠습니다 ㅎhttps://pharmacy1234.herokuapp.com아래 사진을 클릭하면 제 취미공간으로 이어집니다 ㅎㅎ 여기에서 메모 및 일상을 기록하는데 놀러오실 분들은 언제나 환영합니다!링크로 이동하려면 사진을 클릭참고‘소스놀이터’      무료 Node Js 호스팅 (5분만에 무료 홈페이지 소스 올리기)" }, { "title": "Node.js & 네이버지도로 내 근처 약국들 찾기 2", "url": "/posts/pharmacy-searching-with-navermap-api-2/", "categories": "developer-tools, api, Node.js", "tags": "api, nodejs", "date": "2022-09-12 00:00:00 +0900", "snippet": "이제 index.html로 갑시다 $(document).ready(async function(){ let XY = await getLocation(); alert(\"위도\" + XY.lat); alert(\"경도\" + XY.lng);이 부분을 보면 document.ready 함수에서 문서가 document로 로드된 후 ready상태일 때현재 위치를 가리키고 그걸 alert 경고창으로 띄우는 걸 나타냅니다 일단 alert 2개 주석처리합시다.그 후 index.js의 이 경로로 접속되게 합시다 /pharmach_list이걸 위해 index.html로 돌아와 ajax를 사용합니다 즉 jquery //지도를 삽입할 HTML 요소 또는 HTML 요소의 id를 지정합니다. var mapDiv = document.getElementById('map'); // 'map'으로 선언해도 동일 //옵션 없이 지도 객체를 생성하면 서울 시청을 중심으로 하는 16 레벨의 지도가 생성됩니다. var map = new naver.maps.Map(mapDiv); $.ajax({ url: \"/pharmach_list\", type: \"GET\", cache: \"false\", dataType: \"json\", data: {\"Q0\": \"서울특별시\", \"Q1\": \"강남구\", \"QT\": \"\", \"QN\": \"\", \"ORD\": \"\", \"pageNo\": \"1\", \"numOfRows\": \"1000\"}, success: function(data) { console.log(data); }, error: function(request, status, error) { } }); url은 경로 type에서 GET방식은 주석처리한 주소의 ?뒤의 값들을 눈에 보이게 하나하나 입력해줌, 그래서/pharmach_list를 정의할 때 app.get을 사용했음 데이터 값은 index.js에서 찾으면됨 에러는 3가지 변수를 받음index.js 로 가서 수정합시다 params: { \"serviceKey\": \"mL6hpE93V2cGEHnZNYbp2kbpZIm2IFyc9rhdh2wIaUseyjghN%2FlJSV7tSchmbL47mZsX8gNcLVtGpsTxQkstdA%3D%3D\", \"Q0\":req.query.Q0, \"Q1\":req.query.Q1, \"QT\":req.query.QT, \"QN\":req.query.QN, \"ORD\":req.query.ORD, \"pageNo\":req.query.pageNo, \"numOfRows\":req.query.numOfRows }이렇게 하면 index.html로 전달한 값이 nodejs로 갔다가 nodejs에서 다시 nodejs에서 api를 호출하여원하는 값이 변환됩니다. index.html을 보면 나오지만 data변수의 값을 콘솔에 출력한 것을 통해디버깅을 가능하게하여 매우 유용합니다.여기까지 요약우선 api 변수가 실행되고 나면 .then으로 들어와 Header에다가 cors를 잡는 오류를 넣었습니다,그런데! response변수가 api내에서 실행되었는데 실제로 response를 return하는 부분은 바깥에 있기에 return response를 알맞은 위치인 위쪽으로 보내줍시다. response 선언한 부분 역시 api 선언문 안에 넣어줍시다 try catch문 역시 axios를 쓰는 위치로 바꿔줍시다app.get(\"/pharmach_list\", (req, res) =&gt; { let api = async() =&gt; { let response = null try { response = await axios.get(\"http://apis.data.go.kr/B552657/ErmctInsttInfoInqireService/getParmacyListInfoInqire\", { params: { \"serviceKey\": \"mL6hpE93V2cGEHnZNYbp2kbpZIm2IFyc9rhdh2wIaUseyjghN%2FlJSV7tSchmbL47mZsX8gNcLVtGpsTxQkstdA%3D%3D\", \"Q0\":req.query.Q0, \"Q1\":req.query.Q1, \"QT\":req.query.QT, \"QN\":req.query.QN, \"ORD\":req.query.ORD, \"pageNo\":req.query.pageNo, \"numOfRows\":req.query.numOfRows } }) } catch(e) { console.log(e); } return response; } api().then((response) =&gt; { res.setHeader(\"Access-Control-Allow-Origin\", \"*\") res.json(response.data.response.body); });});그리고 req.query.Q0    req.query.Q1 이런것들은 프로그램 변수에 할당된 것들이라바꿔줘야 할 것이 있습니다.공공데이터포털 -&gt; 마이페이지여기서 인증키가 (인코딩, 디코딩) 방식이 있습니다.url은 인코딩방식, 저희의 경우엔 디코딩 방식을 써야합니다. 이제 디코딩 키를 복사하여index.js에서 serviceKey 바꿔줍시다그 후node index.js입력 후 localhost 들어가서 F12 누른 후 아래사진과 같이 순서대로 누르면 리스트가 쫙 나옵니다자 이렇게 나오는 이유는 index.html을 보면 /pharmach_list 이 url이 제대로 실행되어 콘솔의 data결과물이console.log로 찍힌 것을 알 수 있습니다.여기서 코드를 조금 수정해봅시다약국 데이터를 받고난 후 지도가 뜨도록 수정해봅시다 //지도를 삽입할 HTML 요소 또는 HTML 요소의 id를 지정합니다. var mapDiv = document.getElementById('map'); // 'map'으로 선언해도 동일 //옵션 없이 지도 객체를 생성하면 서울 시청을 중심으로 하는 16 레벨의 지도가 생성됩니다. var map = new naver.maps.Map(mapDiv);이 코드를 ajax 코드 밑의 console.log(data); 아래에 옮겨줍시다그 후 https://navermaps.github.io/maps.js/docs/tutorial-digest.example.html이 주소로 와서 ‘지도 이동하기’를 찾읍시다코드를 자세히 보면 위도경도값을 LatLng객체를 생성해 그것을 웹에 설정해주면panTo라는 명령으로 이동하고, 그리고 처음지도를 실행할 때 LatLng를 center라는 옵션을 주게되면해당 설정된 경도, 위도로 웹이 이동됨.그리고 그 곳에 이 코드를 복사하여 mapOptions변수를 만들고 아래에 붙입시다 center: new naver.maps.LatLng(37.5666805, 126.9784147), zoom: 9그 후 아까 자리 옮겼던 2번째 변수의 끝에 mapOptions인자를 하나 더 넣은 것으로 수정함으로써옵션에 있는 내용의 위도와 경도 값이 들어감. 그리고 숫자가 37.xxxxx 126.xxxx 인데 그 자리를XY.lat XY.lng로 바꿉시다.이제 localhost로 가보면 이렇게 나옵니다!여기까지의 index.js index.html코드를 보여드릴테니 잘 안된다면 무엇이 틀린건지 비교해보시길 바랍니다.index.jslet express = require(\"express\"); let axios = require(\"axios\");let app = express (); let port = process.env.PORT || 80; app.use(express.static(\"public_html\")); app.listen(port,function(){ console.log(\"HTML 서버 시작됨\")})app.get(\"/pharmach_list\", (req, res) =&gt; { let api = async() =&gt; { let response = null try { response = await axios.get(\"http://apis.data.go.kr/B552657/ErmctInsttInfoInqireService/getParmacyListInfoInqire\", { params: { \"serviceKey\": \"mL6hpE93V2cGEHnZNYbp2kbpZIm2IFyc9rhdh2wIaUseyjghN/lJSV7tSchmbL47mZsX8gNcLVtGpsTxQkstdA==\", \"Q0\":req.query.Q0, \"Q1\":req.query.Q1, \"QT\":req.query.QT, \"QN\":req.query.QN, \"ORD\":req.query.ORD, \"pageNo\":req.query.pageNo, \"numOfRows\":req.query.numOfRows } }) } catch(e) { console.log(e); } return response; } api().then((response) =&gt; { res.setHeader(\"Access-Control-Allow-Origin\", \"*\") res.json(response.data.response.body); });});// https://apis.data.go.kr/B552657/ErmctInsttInfoInqireService/getParmacyListInfoInqire?serviceKey=mL6hpE93V2cGEHnZNYbp2kbpZIm2IFyc9rhdh2wIaUseyjghN%2FlJSV7tSchmbL47mZsX8gNcLVtGpsTxQkstdA%3D%3D&amp;Q0=%EC%84%9C%EC%9A%B8%ED%8A%B9%EB%B3%84%EC%8B%9C&amp;Q1=%EA%B0%95%EB%82%A8%EA%B5%AC&amp;QT=1&amp;QN=%EC%82%BC%EC%84%B1%EC%95%BD%EA%B5%AD&amp;ORD=NAME&amp;pageNo=1&amp;numOfRows=10index.html&lt;html&gt; &lt;head&gt; &lt;script type=\"text/javascript\" src=\"https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=아이디 &amp;amp;submodules=geocoder\"&gt;&lt;/script&gt; &lt;script src=\"https://code.jquery.com/jquery-3.6.1.min.js\" integrity=\"sha256-o88AwQnZB+VDvE9tvIXrMQaPlFFSUTR+nldQm1LuPXQ=\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div style=\"margin-top: 20px; margin-bottom: 10px; font-weight: bold;\"&gt; 약국 지도💊 &lt;/div&gt; &lt;div id=\"map\" style=\"width:100%; height:80%\"&gt; &lt;/div&gt; &lt;/body&gt; &lt;script&gt; $(document).ready(async function(){ let XY = await getLocation(); //alert(\"위도\" + XY.lat); //alert(\"경도\" + XY.lng); $.ajax({ url: \"/pharmach_list\", type: \"GET\", // GET을 통해 밑에 주석처리한 api url 부분 ?뒤부터 눈에 보이게끔 값들을 하나하나 입력해줌 cache: false, //cache는 쓰지 않을거라 false dataType: \"json\", //dataType은 json으로 받겠다 data: {\"Q0\": \"서울특별시\", \"Q1\": \"강남구\", \"QT\": \"\", \"QN\": \"\", \"ORD\": \"\", \"pageNo\": \"1\", \"numOfRows\": \"1000\"}, success: function(data) { console.log(data); var mapOptions = { center: new naver.maps.LatLng(XY.lat, XY.lng), zoom: 9 } //지도를 삽입할 HTML 요소 또는 HTML 요소의 id를 지정합니다. var mapDiv = document.getElementById('map'); // 'map'으로 선언해도 동일 //옵션 없이 지도 객체를 생성하면 서울 시청을 중심으로 하는 16 레벨의 지도가 생성됩니다. var map = new naver.maps.Map(mapDiv, mapOptions); }, error: function(request, status, error) { } }); }); async function getLocation() { let XY = new Object(); if(navigator.geolocation) { let promise = new Promise((resolve, rejected) =&gt; { navigator.geolocation.getCurrentPosition((position) =&gt;{ resolve(position); }); }); let position = await promise; //위도 position.coords.latitude //경도 position.coords.longitude XY.lat = position.coords.latitude; XY.lng = position.coords.longitude; } return XY; } &lt;/script&gt;&lt;/html&gt;자, index.html의 zoom: 9 —&gt; 14로 바꾸어봅시다 그러면 더 가까운 위치로 보이게 될 것입니다.근데 아직 제일 중요한 제 위치 근처로 약국데이터들을 받아오지 못했습니다.현재 위도와 경도만 받아왔는데 이제 위도와 경도의 주소를 가지고오는 역할의 함수가 필요합니다.https://navermaps.github.io/maps.js/docs/tutorial-digest.example.html –&gt; 아래쪽에 보면 주소와 좌표 검색하기 API 클릭여길 보면 reverseGeocode api가 있는데 이를 사용시 위도, 경도 -&gt; 주소로 변환 이제 index.html로 돌아가서 ajax 위에 적어줍시다 naver reverseGeocode 불러주려면 submodule이 geocoder여야 가능하다참고로 reverseGeocode는 비동기형이다 그래서 await를 적어주고 인자를 적기위해 대괄호 추가하겠습니다.LatLng 객체를 만들어 주기 위해 함수를 넣고 첫번째 인자와 두번째 인자를 넣어줍시다그리고 두번째 인자를 function형태로 받습니다 그리고 받을 때 status라는 변수와 response라는 변수로 받겠습니다.그리고 response.result에는 결과값을 받겠습니다. 그리고 그 변수를 result로 선언해줍니다, 그리고 그 밑에 result.items라고 하면items 변수가 담깁니다. items변수도 선언하겠습니다 그리고 시도와 시구군 값이 제대로 있는지 콘솔로 찍어봅시다.완성된 코드는 아래와 같습니다. $(document).ready(async function(){ let XY = await getLocation(); //alert(\"위도\" + XY.lat); //alert(\"경도\" + XY.lng); await naver.maps.Service.reverseGeocode({ location: new naver.maps.LatLng(XY.lat, XY.lng) }, function(status, response){ let result = response.result; let items = result.items; console.log(items[0].addrdetail.sido); // 시도값 console.log(items[0].addrdetail.sigugun); // 시구군 }); $.ajax({여기까지하고 localhost에서 F12 -&gt;오 시도, 시군에 콘솔로그 해준 내용이 잘 나오군요!공공데이터포털 -&gt; 마이페이지, 잠깐 사진을 봅시다, 공백을 허용하지않군요.이제 경상북도 xx시, 경상남도 xx시로 나누어지는 경우를 생각해봅시다. 공백을 제거하기 위해index.html의 시도, 시구군 함수 수정합시다, 일단 2개 주석처리 $(document).ready(async function(){ let XY = await getLocation(); //alert(\"위도\" + XY.lat); //alert(\"경도\" + XY.lng); await naver.maps.Service.reverseGeocode({ location: new naver.maps.LatLng(XY.lat, XY.lng) }, function(status, response){ let result = response.result; let items = result.items; //console.log(items[0].addrdetail.sido); // 시도값 //console.log(items[0].addrdetail.sigugun); // 시구군 let sido_arr = items[0].addrdetail.sido.split(\" \"); let gubun_arr = items[0].addrdetail.sigugun.split(\" \"); let sido = \"\"; let gubun = \"\"; if(sido_arr.length ==1) { sido = sido_arr[0]; gugun = gubun_arr[0]; } else if(sido_arr.length &gt; 1) { sido = sido_arr[0]; gugun = gubun_arr[1]; } console.log(sido); console.log(gugun); });이렇게되면 2개의 요소를 가진 배열이 되어, 한줄에 있던 경상남도 xx시–&gt;경상남도xx시그리고 새롭게 편집될 변수도 미리 정의해줍시다.만약 시도가 1이라는 것은 서울특별시 처럼 한큐에 끝날때 시도와 구군의 첫번째 요소가됨,만약 그렇지 않고 시도 어레이가 1보다 클때, 즉 공백이 하나 있을때 ex) 경상남도 xx시그때 시도 어래이는 0, 그러나 구군 어레이는 첫번째 인자인 1을 적어주게 되면시도와 구군이 공백이 제거된 상태로 만들어짐이제 값이 제대로 잘 적혀있는지 콘솔로 시도, 구군을 확인해봅시다오 잘 나오군요!이제 index.html로 가서 Q0에는 sido변수를, Q1에는 gugun변수를 넣어줍시다\\ $.ajax({ url: \"/pharmach_list\", type: \"GET\", // GET을 통해 밑에 주석처리한 api url 부분 ?뒤부터 눈에 보이게끔 값들을 하나하나 입력해줌 cache: false, //cache는 쓰지 않을거라 false dataType: \"json\", //dataType은 json으로 받겠다 data: {\"Q0\": sido, \"Q1\": gugun, \"QT\": \"\", \"QN\": \"\", \"ORD\": \"\", \"pageNo\": \"1\", \"numOfRows\": \"1000\"},그리고 이부분 역시 비동기이기 때문에 ajax구문 위치를 옮깁시다. console.log(sido); console.log(gugun);이곳 아래에 배치합시다, 여기까지의 index.html 코드는 이렇게 됩니다 $(document).ready(async function(){ let XY = await getLocation(); //alert(\"위도\" + XY.lat); //alert(\"경도\" + XY.lng); await naver.maps.Service.reverseGeocode({ location: new naver.maps.LatLng(XY.lat, XY.lng) }, function(status, response){ let result = response.result; let items = result.items; //console.log(items[0].addrdetail.sido); // 시도값 //console.log(items[0].addrdetail.sigugun); // 시구군 let sido_arr = items[0].addrdetail.sido.split(\" \"); let gubun_arr = items[0].addrdetail.sigugun.split(\" \"); let sido = \"\"; let gubun = \"\"; if(sido_arr.length ==1) { sido = sido_arr[0]; gugun = gubun_arr[0]; } else if(sido_arr.length &gt; 1) { sido = sido_arr[0]; gugun = gubun_arr[1]; } console.log(sido); console.log(gugun); $.ajax({ url: \"/pharmach_list\", type: \"GET\", // GET을 통해 밑에 주석처리한 api url 부분 ?뒤부터 눈에 보이게끔 값들을 하나하나 입력해줌 cache: false, //cache는 쓰지 않을거라 false dataType: \"json\", //dataType은 json으로 받겠다 data: {\"Q0\": sido, \"Q1\": gugun, \"QT\": \"\", \"QN\": \"\", \"ORD\": \"\", \"pageNo\": \"1\", \"numOfRows\": \"1000\"}, success: function(data) { console.log(data); var mapOptions = { center: new naver.maps.LatLng(XY.lat, XY.lng), zoom: 14 } //지도를 삽입할 HTML 요소 또는 HTML 요소의 id를 지정합니다. var mapDiv = document.getElementById('map'); // 'map'으로 선언해도 동일 //옵션 없이 지도 객체를 생성하면 서울 시청을 중심으로 하는 16 레벨의 지도가 생성됩니다. var map = new naver.maps.Map(mapDiv, mapOptions); }, error: function(request, status, error) { } }); }); }); async function getLocation() { let XY = new Object(); if(navigator.geolocation) { let promise = new Promise((resolve, rejected) =&gt; { navigator.geolocation.getCurrentPosition((position) =&gt;{ resolve(position); }); }); let position = await promise; //위도 position.coords.latitude //경도 position.coords.longitude XY.lat = position.coords.latitude; XY.lng = position.coords.longitude; } return XY; }그리고 강력 새로고침을 해보면 빠밤마지막으로 약국이 지도에 보이게 하는 작업만 남았습니다.\\https://navermaps.github.io/maps.js/docs/tutorial-digest.example.html–&gt; 중간에 정보창 있는 곳에 정보 창 옵션 사용하기 클릭푸른 아이콘 클릭시 그곳의 정보를 보여주는 역할 수행합니다.잠깐 localhost에서 F12 -&gt; console -&gt; items 클릭그러면 아래와 같은 사진들이 보일 것입니다총 81개의 각 배열들이 있고 제가 있는 곳은 아마 큰 번화가가 아니라 약국갯수가 이런데 다른 번화가가면 몇백개 나올 수도 있습니다.복수형으로 만들어주어야하기 때문에 하나하나 엑세스하기 위해 반복문인 forEach 받읍시다, 첫번째인자로 it, 두번째 인자로 index이 it변수에는 item 배열에 있는 81개가 각각 it변수에 담깁니다.function 영역은 81개 전체 배열갯수만큼 반복해서 실행되는 영역var map =이 곳 아래에 적어줍시다이제 각 dutyName dutyAddr dutyTel1 dutyTime으로 변수 받읍시다그리고 https://navermaps.github.io/maps.js/docs/tutorial-infowindow-options.example.html이곳에서 marker부터 끝까지 복사하여 그 아래에 붙여넣기, 그리고 marker는 let 변수로 선언해줍시다.이제 index.html을 보면 마커가 표시될 위치(position)이 있는데 position이 cityhall이라는 변수로 되있음예제를 보면 cityhall이 있는 내용이 있습니다 그 부분 복사하여 dutyTime 아래에 넣읍시다. 근데 우리는 약국을 하니까let cityhall –&gt; let pharmacy_location 바꿔줍시다 그리고 position도 바꿔주고 아래에\\var contentString = [---------]—&gt; var contentString = [ '&lt;div class=\"iw_inner\"&gt;', ' &lt;h3&gt;'+dutyName+'&lt;/h3&gt;', ' &lt;p&gt;'+dutyAddr+'&lt;br /&gt;', ' '+dutyTel1+'&lt;br /&gt;', ' '+dutyTime, ' &lt;/p&gt;', '&lt;/div&gt;' ].join('');참 이곳에 img src 한줄 지웁시다 우린 사진이 필요없으니그리고 localhost에서 F12를 누릅시다사진에 보면 행으로 번호가 0~16으로 있는데 이중에 아무거나 누르면 자세한 정보가 나오는데 그 안에 이 2개가 있을겁니다wgs84Lat wgs84Lon 그거를 37.xxx 126.xxx 대신에 앞에 it.을 붙여 합쳐서 각각 고칩시다여기까지의 index.html 코드는 이렇습니다.&lt;html&gt; &lt;head&gt; &lt;script type=\"text/javascript\" src=\"https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=b3cui5r9yl&amp;amp;submodules=geocoder\"&gt;&lt;/script&gt; &lt;script src=\"https://code.jquery.com/jquery-3.6.1.min.js\" integrity=\"sha256-o88AwQnZB+VDvE9tvIXrMQaPlFFSUTR+nldQm1LuPXQ=\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div style=\"margin-top: 20px; margin-bottom: 10px; font-weight: bold;\"&gt; 약국 지도💊 &lt;/div&gt; &lt;div id=\"map\" style=\"width:100%; height:80%\"&gt; &lt;/div&gt; &lt;/body&gt; &lt;script&gt; $(document).ready(async function(){ let XY = await getLocation(); //alert(\"위도\" + XY.lat); //alert(\"경도\" + XY.lng); await naver.maps.Service.reverseGeocode({ location: new naver.maps.LatLng(XY.lat, XY.lng) }, function(status, response){ let result = response.result; let items = result.items; //console.log(items[0].addrdetail.sido); // 시도값 //console.log(items[0].addrdetail.sigugun); // 시구군 let sido_arr = items[0].addrdetail.sido.split(\" \"); let gubun_arr = items[0].addrdetail.sigugun.split(\" \"); let sido = \"\"; let gubun = \"\"; if(sido_arr.length ==1) { sido = sido_arr[0]; gugun = gubun_arr[0]; } else if(sido_arr.length &gt; 1) { sido = sido_arr[0]; gugun = gubun_arr[1]; } console.log(sido); console.log(gugun); $.ajax({ url: \"/pharmach_list\", type: \"GET\", // GET을 통해 밑에 주석처리한 api url 부분 ?뒤부터 눈에 보이게끔 값들을 하나하나 입력해줌 cache: false, //cache는 쓰지 않을거라 false dataType: \"json\", //dataType은 json으로 받겠다 data: {\"Q0\": sido, \"Q1\": gugun, \"QT\": \"\", \"QN\": \"\", \"ORD\": \"\", \"pageNo\": \"1\", \"numOfRows\": \"1000\"}, success: function(data) { console.log(data); var mapOptions = { center: new naver.maps.LatLng(XY.lat, XY.lng), zoom: 14 } //지도를 삽입할 HTML 요소 또는 HTML 요소의 id를 지정합니다. var mapDiv = document.getElementById('map'); // 'map'으로 선언해도 동일 //옵션 없이 지도 객체를 생성하면 서울 시청을 중심으로 하는 16 레벨의 지도가 생성됩니다. var map = new naver.maps.Map(mapDiv, mapOptions); data.items.item.forEach(function(it, index){ let dutyName = it.dutyName; //약국명 let dutyAddr = it.dutyAddr; //주소 let dutyTel1 = it.dutyTel1; //전번 let dutyTime = \"\"; //업무시간 let pharmacy_location = new naver.maps.LatLng(it.wgs84Lat, it.wgs84Lon) let marker = new naver.maps.Marker({ map: map, position: pharmacy_location }); var contentString = [ '&lt;div class=\"iw_inner\"&gt;', ' &lt;h3&gt;'+dutyName+'&lt;/h3&gt;', ' &lt;p&gt;'+dutyAddr+'&lt;br /&gt;', ' '+dutyTel1+'&lt;br /&gt;', ' '+dutyTime, ' &lt;/p&gt;', '&lt;/div&gt;' ].join(''); var infowindow = new naver.maps.InfoWindow({ content: contentString, maxWidth: 140, backgroundColor: \"#eee\", borderColor: \"#2db400\", borderWidth: 5, anchorSize: new naver.maps.Size(30, 30), anchorSkew: true, anchorColor: \"#eee\", pixelOffset: new naver.maps.Point(20, -20) }); naver.maps.Event.addListener(marker, \"click\", function(e) { if (infowindow.getMap()) { infowindow.close(); } else { infowindow.open(map, marker); } }); }); }, error: function(request, status, error) { } }); }); }); async function getLocation() { let XY = new Object(); if(navigator.geolocation) { let promise = new Promise((resolve, rejected) =&gt; { navigator.geolocation.getCurrentPosition((position) =&gt;{ resolve(position); }); }); let position = await promise; //위도 position.coords.latitude //경도 position.coords.longitude XY.lat = position.coords.latitude; XY.lng = position.coords.longitude; } return XY; } &lt;/script&gt;&lt;/html&gt;그리고 localhost에서 강력 새로고침하여 확인해보면약국은 잘 뜨는데 보이는 폭이 좁아서 글자가 좀 잘리는 것 같군요.폭 maxWidth 140 -&gt; 440으로 고칩시다 그리고 요일별 영업시간 번호 등 추가해줍시다.오 이제 잘나옵니다!여기까지의 index.html와 index.js 코드를 공개할테니 잘 안되시는 분들은 비교해보시고 수정해보세요ㅎindex.html&lt;html&gt; &lt;head&gt; &lt;script type=\"text/javascript\" src=\"https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=아이디 &amp;amp;submodules=geocoder\"&gt;&lt;/script&gt; &lt;script src=\"https://code.jquery.com/jquery-3.6.1.min.js\" integrity=\"sha256-o88AwQnZB+VDvE9tvIXrMQaPlFFSUTR+nldQm1LuPXQ=\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div style=\"margin-top: 20px; margin-bottom: 10px; font-weight: bold;\"&gt; 약국 지도💊 &lt;/div&gt; &lt;div id=\"map\" style=\"width:100%; height:80%\"&gt; &lt;/div&gt; &lt;/body&gt; &lt;script&gt; $(document).ready(async function(){ let XY = await getLocation(); //alert(\"위도\" + XY.lat); //alert(\"경도\" + XY.lng); await naver.maps.Service.reverseGeocode({ location: new naver.maps.LatLng(XY.lat, XY.lng) }, function(status, response){ let result = response.result; let items = result.items; //console.log(items[0].addrdetail.sido); // 시도값 //console.log(items[0].addrdetail.sigugun); // 시구군 let sido_arr = items[0].addrdetail.sido.split(\" \"); let gubun_arr = items[0].addrdetail.sigugun.split(\" \"); let sido = \"\"; let gubun = \"\"; if(sido_arr.length ==1) { sido = sido_arr[0]; gugun = gubun_arr[0]; } else if(sido_arr.length &gt; 1) { sido = sido_arr[0]; gugun = gubun_arr[1]; } console.log(sido); console.log(gugun); $.ajax({ url: \"/pharmach_list\", type: \"GET\", // GET을 통해 밑에 주석처리한 api url 부분 ?뒤부터 눈에 보이게끔 값들을 하나하나 입력해줌 cache: false, //cache는 쓰지 않을거라 false dataType: \"json\", //dataType은 json으로 받겠다 data: {\"Q0\": sido, \"Q1\": gugun, \"QT\": \"\", \"QN\": \"\", \"ORD\": \"\", \"pageNo\": \"1\", \"numOfRows\": \"1000\"}, success: function(data) { console.log(data); var mapOptions = { center: new naver.maps.LatLng(XY.lat, XY.lng), zoom: 20 } //지도를 삽입할 HTML 요소 또는 HTML 요소의 id를 지정합니다. var mapDiv = document.getElementById('map'); // 'map'으로 선언해도 동일 //옵션 없이 지도 객체를 생성하면 서울 시청을 중심으로 하는 16 레벨의 지도가 생성됩니다. var map = new naver.maps.Map(mapDiv, mapOptions); data.items.item.forEach(function(it, index){ let dutyName = it.dutyName; //약국명 let dutyAddr = it.dutyAddr; //주소 let dutyTel1 = it.dutyTel1; //전번 let dutyTime = \"\"; //업무시간 if(it.dutyTime1s &amp;&amp; it.dutyTime1c) { dutyTime += \"월요일: \" + it.dutyTime1s + \" ~ \" + it.dutyTime1c + \"&lt;br&gt;\"; } if(it.dutyTime2s &amp;&amp; it.dutyTime2c) { dutyTime += \"화요일: \" + it.dutyTime2s + \" ~ \" + it.dutyTime2c + \"&lt;br&gt;\"; } if(it.dutyTime3s &amp;&amp; it.dutyTime3c) { dutyTime += \"수요일: \" + it.dutyTime3s + \" ~ \" + it.dutyTime3c + \"&lt;br&gt;\"; } if(it.dutyTime4s &amp;&amp; it.dutyTime4c) { dutyTime += \"목요일: \" + it.dutyTime4s + \" ~ \" + it.dutyTime4c + \"&lt;br&gt;\"; } if(it.dutyTime5s &amp;&amp; it.dutyTime5c) { dutyTime += \"금요일: \" + it.dutyTime5s + \" ~ \" + it.dutyTime5c + \"&lt;br&gt;\"; } if(it.dutyTime6s &amp;&amp; it.dutyTime6c) { dutyTime += \"토요일: \" + it.dutyTime6s + \" ~ \" + it.dutyTime6c + \"&lt;br&gt;\"; } if(it.dutyTime7s &amp;&amp; it.dutyTime7c) { dutyTime += \"일요일: \" + it.dutyTime7s + \" ~ \" + it.dutyTime7c + \"&lt;br&gt;\"; } if(it.dutyTime8s &amp;&amp; it.dutyTime8c) { dutyTime += \"공휴일\"; + it.dutyTime8s + \" ~ \" + it.dutyTime8c + \"&lt;br&gt;\"; } let pharmacy_location = new naver.maps.LatLng(it.wgs84Lat, it.wgs84Lon) let marker = new naver.maps.Marker({ map: map, position: pharmacy_location }); var contentString = [ '&lt;div class=\"iw_inner\"&gt;', ' &lt;h3&gt;'+dutyName+'&lt;/h3&gt;', ' &lt;p&gt;'+dutyAddr+'&lt;br /&gt;', ' '+dutyTel1+'&lt;br /&gt;', ' '+dutyTime, ' &lt;/p&gt;', '&lt;/div&gt;' ].join(''); var infowindow = new naver.maps.InfoWindow({ content: contentString, maxWidth: 440, backgroundColor: \"#eee\", borderColor: \"#2db400\", borderWidth: 5, anchorSize: new naver.maps.Size(30, 30), anchorSkew: true, anchorColor: \"#eee\", pixelOffset: new naver.maps.Point(20, -20) }); naver.maps.Event.addListener(marker, \"click\", function(e) { if (infowindow.getMap()) { infowindow.close(); } else { infowindow.open(map, marker); } }); }); }, error: function(request, status, error) { } }); }); }); async function getLocation() { let XY = new Object(); if(navigator.geolocation) { let promise = new Promise((resolve, rejected) =&gt; { navigator.geolocation.getCurrentPosition((position) =&gt;{ resolve(position); }); }); let position = await promise; //위도 position.coords.latitude //경도 position.coords.longitude XY.lat = position.coords.latitude; XY.lng = position.coords.longitude; } return XY; } &lt;/script&gt;&lt;/html&gt;index.jslet express = require(\"express\"); let axios = require(\"axios\");let app = express (); let port = process.env.PORT || 80; app.use(express.static(\"public_html\")); app.listen(port,function(){ console.log(\"HTML 서버 시작됨\")})app.get(\"/pharmach_list\", (req, res) =&gt; { let api = async() =&gt; { let response = null try { response = await axios.get(\"http://apis.data.go.kr/B552657/ErmctInsttInfoInqireService/getParmacyListInfoInqire\", { params: { \"serviceKey\": \"mL6hpE93V2cGEHnZNYbp2kbpZIm2IFyc9rhdh2wIaUseyjghN/lJSV7tSchmbL47mZsX8gNcLVtGpsTxQkstdA==\", \"Q0\":req.query.Q0, \"Q1\":req.query.Q1, \"QT\":req.query.QT, \"QN\":req.query.QN, \"ORD\":req.query.ORD, \"pageNo\":req.query.pageNo, \"numOfRows\":req.query.numOfRows } }) } catch(e) { console.log(e); } return response; } api().then((response) =&gt; { res.setHeader(\"Access-Control-Allow-Origin\", \"*\") res.json(response.data.response.body); });});2022 09 19일 갑자기 내 위치를 나타내는 커스텀 마커가 추가하고싶어졌다. 그리하여 코드를 변형시켰다index.html 로 갑시다.var mapOptions = { center: new naver.maps.LatLng(XY.lat, XY.lng),zoom: 14,}var map = new naver.maps.Map(mapDiv, mapOptions);이문장 바로 아래에 이 문장들을 추가합시다 var position = new naver.maps.LatLng(XY.lat, XY.lng); var map = new naver.maps.Map('map', { center: position, zoom: 14 }); var markerOptions = { position: position, map: map, icon: { content: [ '&lt;img src=\"/img/sugar.jpg\" style=\"position:absolute; top:2px; left:2px; width:32px; height:32px; object-fit:cover; object-position:center center; border-radius:50%; z-index:6\"&gt;', '&lt;img src=\"/map-pin-afterUser.svg\" style=\"position;absolute; top:0; left:0; z-index:5\"&gt;', ].join(''), anchor: new naver.maps.Point(25, 26) } }; var marker = new naver.maps.Marker(markerOptions); var circle = new naver.maps.Circle({ map: map, center: new naver.maps.LatLng(XY.lat, XY.lng), radius: 50, fillColor: 'red', fillOpacity: 0.2 });그 후 저의 경우에는 public 폴더를 만들어 그안에 img 폴더, 그안에 sugar.jpg를 저장하였습니다.자 이상태로 바로 node index.js 실행하면 오류나서 커스텀 마커 안나옵니다무슨 말이냐면 index.js에 코드에 static으로 img 디렉터리를 지정하거나리소스에 접근했을때 보내주는 코드가 없기 때문입니다.(이 부분은 뀰님께서 도와주셔서 해결할 수 있었습니다, 다시 한번 감사드립니다.)이제 index.js로 가서 문장 하나 추가해주고 포트번호 80 -&gt; 5000 변경해줍시다app.use(express.static('public'));그러면 사진처럼 빰!자 여기까지의 파일트리와 index.js와 index.html 코드는 이렇습니다.index.jslet express = require(\"express\");// express모듈을 선언 + 어떤 모듈을 쓸건지 require로 지정 = 이제 이 구문을 통해 express모듈이 사용 가능한 상태가 됨let axios = require(\"axios\");// axios 모듈을 사용하겠다let app = express ();// app 이라는 변수 하나를 더 선언하여 express객체를 할당하자 이제 이 구문을 통해 app이라는 변수는 express 모듈을 가르키게 됨let port = process.env.PORT || 5000;app.use(express.static('public'));// 커스텀 마커를 사용하기 위해 public 폴더 안 파일과 localhost:5000 연동되게 해줌app.use(express.static(\"public_html\"));// express의 use 메소드를 선언하고 express.static이라고 괄호 사이에 입력한 후 public_html 로 지정하겠다// 이제 public_html 폴더 아래에 있는 모든 파일들은 app.use 즉 express 모듈의 웹서버가 구동되게함app.listen(port,function(){ console.log(\"HTML 서버 시작됨\")})// express 서비스가 작동될 포트 지정 보통 80번 많이씀 그리고 포트 열렸는지 확인해주기위해 콘솔을 적음// app.listen에 port를 사용해주고 대신 위에 포트 80변수를 선언해주자 이건 사용되기 앞서 그 이전에 설정되야함// 이제 위로 가서 포트 80 변수를 선언해주자 process.env.PORT는 환경설정 내용이다//현재 app.use를 사용해 웹서버를 열은 상황이다 근데//한페이지만 이름을 pharmach_list따로 열어보겠다 //이 경우는 app.get으로 가능하다//그리고 여기 접속했을때 어떤 데이터를 보낼지 결정가능/////////////////app.get (\"/pharmach_list\", (req, res) =&gt; { let api = async() =&gt; { let response = null; try { response = await axios.get(\"http://apis.data.go.kr/B552657/ErmctInsttInfoInqireService/getParmacyListInfoInqire\", { params: { \"serviceKey\": \"mL6hpE93V2cGEHnZNYbp2kbpZIm2IFyc9rhdh2wIaUseyjghN/lJSV7tSchmbL47mZsX8gNcLVtGpsTxQkstdA==\", \"Q0\": req.query.Q0, \"Q1\": req.query.Q1, \"QT\": req.query.QT, \"QN\": req.query.QN, \"ORD\": req.query.ORD, \"pageNo\": req.query.pageNo, \"numOfRows\": req.query.numOfRows // 1000개의 데이터를 1장에 한번에 받겠다 } }) } catch(e) { console.log(e); } return response; } api().then((response) =&gt; { res.setHeader(\"Access-Control-Allow-Origin\", \"*\"); // * = all, access control 근원(origin)으로 가능한 것들은 전부 허용해줘라 이렇게 세팅시 cors 로 인한 문제 해결 가능 res.json(response.data.response.body); // data.response.body가 위에 보이는 약국데이터다, 이를 pharmach_list 경로로 접근하는 컴퓨터에게 데이터 제공 }); });index.html&lt;html&gt; &lt;head&gt; &lt;!-- script type는 자바스크립트, src를 넣어 소스는 다른 곳에 있다고 지정 ex) 네이버 open api에 있는 정보--&gt; &lt;script type=\"text/javascript\" src=\"https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=xeulgqnc95&amp;amp;submodules=geocoder\"&gt;&lt;/script&gt; &lt;script src=\"https://code.jquery.com/jquery-3.6.1.min.js\" integrity=\"sha256-o88AwQnZB+VDvE9tvIXrMQaPlFFSUTR+nldQm1LuPXQ=\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;/head&gt; &lt;body&gt; &lt;div style=\"margin-top: 20px; margin-bottom: 10px; font-weight: bold;\"&gt; 약국 지도💊 &lt;/div&gt; &lt;div id=\"map\" style=\"width:100%; height:80%\"&gt; &lt;/div&gt; &lt;/body&gt; &lt;script&gt; $(document).ready(async function(){ let XY = await getLocation(); //alert(\"위도\" + XY.lat); //alert(\"경도\" + XY.lng); // reverseGeocode는 비동기형이라 await 추가 await naver.maps.Service.reverseGeocode({ location: new naver.maps.LatLng(XY.lat, XY.lng) },function(status, response){ let result = response.result; let items = result.items; //console.log(items[0].addrdetail.sido); //console.log(items[0].addrdetail.sigugun); let sido_arr = items[0].addrdetail.sido.split(\" \"); let gubun_arr = items[0].addrdetail.sigugun.split(\" \"); let sido = \"\"; let gubun = \"\"; if(sido_arr.length ==1) { sido = sido_arr[0]; gugun = gubun_arr[0] } else if(sido_arr.length &gt; 1) { sido = sido_arr[0]; gugun = sido_arr[1] } console.log(sido); console.log(gugun); $.ajax({ url: \"/pharmach_list\", type: \"GET\", // GET을 통해 밑에 주석처리한 api url 부분 ?뒤부터 눈에 보이게끔 값들을 하나하나 입력해줌 cache: false, //cache는 쓰지 않을거라 false dataType: \"json\", //dataType은 json으로 받겠다 data: {\"Q0\": sido, \"Q1\": gugun, \"QT\": \"\", \"QN\": \"\", \"ORD\": \"\", \"pageNo\": \"1\", \"numOfRows\": \"1000\"}, success: function(data) { console.log(data); //지도를 삽입할 HTML 요소 또는 HTML 요소의 id를 지정합니다. var mapDiv = document.getElementById('map'); // 'map'으로 선언해도 동일 //옵션 없이 지도 객체를 생성하면 서울 시청을 중심으로 하는 16 레벨의 지도가 생성됩니다. var mapOptions = { center: new naver.maps.LatLng(XY.lat, XY.lng), zoom: 14 } var map = new naver.maps.Map(mapDiv, mapOptions);////////////////////////////////////////////////////////////////////////////////////////// var position = new naver.maps.LatLng(XY.lat, XY.lng); var map = new naver.maps.Map('map', { center: position, zoom: 14 }); var markerOptions = { position: position, map: map, icon: { content: [ '&lt;img src=\"/img/sugar.jpg\" style=\"position:absolute; top:2px; left:2px; width:32px; height:32px; object-fit:cover; object-position:center center; border-radius:50%; z-index:6\"&gt;', '&lt;img src=\"/map-pin-afterUser.svg\" style=\"position;absolute; top:0; left:0; z-index:5\"&gt;', ].join(''), anchor: new naver.maps.Point(25, 26) } }; var marker = new naver.maps.Marker(markerOptions); var circle = new naver.maps.Circle({ map: map, center: new naver.maps.LatLng(XY.lat, XY.lng), radius: 50, fillColor: 'red', fillOpacity: 0.2 }); ////////////////////////////////////////////////////////////////////////////// data.items.item.forEach(function(it, index){ let dutyName = it.dutyName; let dutyAddr = it.dutyAddr; let dutyTel1 = it.dutyTel1; let dutyTime = \"\"; if(it.dutyTime1s &amp;&amp; it.dutyTime1c) { dutyTime += \"월요일: \" + it.dutyTime1s + \" ~ \" + it.dutyTime1c + \"&lt;br&gt;\"; } if(it.dutyTime2s &amp;&amp; it.dutyTime2c) { dutyTime += \"화요일: \" + it.dutyTime2s + \" ~ \" + it.dutyTime2c + \"&lt;br&gt;\"; } if(it.dutyTime3s &amp;&amp; it.dutyTime3c) { dutyTime += \"수요일: \" + it.dutyTime3s + \" ~ \" + it.dutyTime3c + \"&lt;br&gt;\"; } if(it.dutyTime4s &amp;&amp; it.dutyTime4c) { dutyTime += \"목요일: \" + it.dutyTime4s + \" ~ \" + it.dutyTime4c + \"&lt;br&gt;\"; } if(it.dutyTime5s &amp;&amp; it.dutyTime5c) { dutyTime += \"금요일: \" + it.dutyTime5s + \" ~ \" + it.dutyTime5c + \"&lt;br&gt;\"; } if(it.dutyTime6s &amp;&amp; it.dutyTime6c) { dutyTime += \"토요일: \" + it.dutyTime6s + \" ~ \" + it.dutyTime6c + \"&lt;br&gt;\"; } if(it.dutyTime7s &amp;&amp; it.dutyTime7c) { dutyTime += \"일요일: \" + it.dutyTime7s + \" ~ \" + it.dutyTime7c + \"&lt;br&gt;\"; } if(it.dutyTime8s &amp;&amp; it.dutyTime8c) { dutyTime += \"공휴일\"; + it.dutyTime8s + \" ~ \" + it.dutyTime8c + \"&lt;br&gt;\"; } let pharmacy_location = new naver.maps.LatLng(it.wgs84Lat, it.wgs84Lon) let marker = new naver.maps.Marker({ map: map, position: pharmacy_location }); var contentString = [ '&lt;div class=\"iw_inner\"&gt;', ' &lt;h3&gt;'+dutyName+'&lt;/h3&gt;', ' &lt;p&gt;'+dutyAddr+'&lt;br /&gt;', ' '+dutyTel1+'&lt;br /&gt;', ' '+dutyTime, ' &lt;/p&gt;', '&lt;/div&gt;' ].join(''); var infowindow = new naver.maps.InfoWindow({ content: contentString, maxWidth: 440, backgroundColor: \"#eee\", borderColor: \"#2db400\", borderWidth: 5, anchorSize: new naver.maps.Size(30, 30), anchorSkew: true, anchorColor: \"#eee\", pixelOffset: new naver.maps.Point(20, -20) }); naver.maps.Event.addListener(marker, \"click\", function(e) { if (infowindow.getMap()) { infowindow.close(); } else { infowindow.open(map, marker); } }); }); }, error: function(request, status, error) { } }); }); }); // geolocation은 gps와 관련된 객체, 이 객체가 존재하면 getLocation 실행함 // getCurrentPosition 사용시 현재 위치를 알 수 있다, position 이라는 객체를 통해 현 위치 파악 async function getLocation() { let XY = new Object(); if(navigator.geolocation) { let promise = new Promise((resolve, rejected) =&gt; { navigator.geolocation.getCurrentPosition((position) =&gt; { resolve(position); }); }); let position = await promise; //위도 position.coords.latitude //경도 position.coords.longitude XY.lat = position.coords.latitude XY.lng = position.coords.longitude } return XY; } &lt;/script&gt; &lt;/html&gt;아래 사진을 클릭하면 제 취미공간으로 이어집니다 ㅎㅎ 여기에서 메모 및 일상을 기록하는데 놀러오실 분들은 언제나 환영합니다!링크로 이동하려면 사진을 클릭참고‘소스놀이터’      Node.Js로 네이버 약국 지도 만들기 #2 (express &amp; axios 모듈, 비동기 문제 해결)      30:12 ~‘소스놀이터’      Node.Js로 네이버 약국 지도 만들기 #3 (LAST) (data.go.kr 오픈 API)     http://expressjs.com/ko/starter/static-files.html 도와주신 분들‘뀰’ - https://github.com/devlaq유튜브 - 소스놀이터오중호랑이 - https://ojtiger.com/" }, { "title": "[error: npm init]", "url": "/posts/npm-init-error/", "categories": "etc, error", "tags": "npm", "date": "2022-09-07 00:00:00 +0900", "snippet": " 🚨문제 발생   사진 참고 npm init입력했더니 🔑내가 해결한 방법1   windowspowershell을 입력하여 관리자로 실행합시다2   권한상태 확인 get-ExecutionPolicy이걸 입력해보면 Restricted 라고 나올겁니다3   권한변경 및 변경이 잘 되었는지 확인- 권한 상태값 참고 Restricted : default설정값으로, 스크립트 파일을 실행할 수 없습니다. AllSigned : 신뢰할 수 있는(서명된) 스크립트 파일만 실행할 수 있습니다. RemoteSigned : 로컬에서 본인이 생성한 스크립트와, 신뢰할 수 있는(서명된) 스크립트 파일 실행할 수 있습니다. Unrestricted : 모든 스크립트 실행가능 ByPass : 경고/차단 없이 모든 것을 실행가능하도록함 Undefined : 권한을 설정하지 않겠음Set-ExecutionPolicy RemoteSigned입력후 y 입력하고 엔터 get-ExecutionPolicy그리고 RemoteSigned로 변경이 잘 되었는지 확인해봅시다다 되었다면 vscode나 cmd에서 npm init 입력하였을때 잘 작동할겁니다!보시고 미흡한 부분이 있다면 피드백은 언제나 환영합니다!아래 사진을 클릭하면 제 취미공간으로 이어집니다 ㅎㅎ 여기에서 메모 및 일상을 기록하는데 놀러오실 분들은 언제나 환영합니다!링크로 이동하려면 사진을 클릭참고‘지옥의불구덩이’      VSCode 오류 : 이 시스템에서 스크립트를 실행할 수 없으므로 …" }, { "title": "Node.js & 네이버지도로 내 근처 약국들 찾기 1", "url": "/posts/pharmacy-searching-with-navermap-api/", "categories": "developer-tools, api, Node.js", "tags": "api, nodejs", "date": "2022-09-07 00:00:00 +0900", "snippet": "‘소스놀이터’님의 유튜브영상을 보고 이렇게 좋은 작업물을 완성할 수 있었습니다.양질의 자료를 제공해주신 ‘소스놀이터’님께 다시한번 감사의 말씀을 드립니다. vscode 설치 nodejs 설치완료 nodejs 환경변수 설정이 3가지가 완료되어있다는 가정하에 시작하겠습니다.1   폴더 만들기, 네이버api 가입, 공공데이터 포털1-1   로컬디스크C에 미리 nodejs_pharmacy 폴더 만들어 놓기미리 로컬디스크C에 nodejs_pharmacy 폴더를 만들어 놓은 후이제 cmd로 들어갑시다, C:\\Users\\rhwns&gt; 이경로가 나와서 cd .. 을 2번 입력해줍시다 그러면 경로 하나씩 지워지면서C:/&gt; 이쪽으로 경로가 바뀝니다 이제 여기서 cd nodejs_pharmacy 입력 ㄱㄱ이제 cmd나 vscode를 열어 C:\\nodejs_pharmacy&gt; 이 경로에서 아래 문장 입력npm init이렇게 나옵니다 근데 당황하진 맙시다! 왜냐하면 우린 고칠 수 있으니까!오류를 고치기 위해 이걸 클릭자 오류를 해결했으면 이 경로에서 C:\\nodejs_pharmacy&gt; 이어서 입력합시다npm init이거 입력하면어떤 항목들이 나오는데 쭉 엔터하다가 마지막에is this OK? (yes) 라는 문장이 나오는데 여기서 y입력을 하고 엔터누르면 package.json이 생성됩니다.저 파일을 들어가보면 버젼은 어떻고 메인으로 index.js 파일을 써라 등 기본정보가 나와있습니다.이제 이어서npm install express입력 후 잘 설치가되었다면 현재 경로에 폴더 node_modules 그리고 package-lock.json이 생성되어 있을 것입니다.이제 index.js 파일을 만들어줍시다.let express = require(\"express\"); // 1let app = express (); // 2let port = process.env.PORT || 80; // 포트 80 변수 선언app.use(express.static(\"public_html\")); // 3app.listen(port,function(){ //4 console.log(\"HTML 서버 시작됨\")})1)   express모듈을 선언 + 어떤 모듈을 쓸건지 require로 지정 = 이제 이 구문을 통해 express모듈이 사용 가능한 상태가 됨2)   app 이라는 변수 하나를 더 선언하여 express객체를 할당하자 이제 이 구문을 통해 app이라는 변수는 express 모듈을 가르키게 됨3)   express의 use 메소드를 선언하고 express.static이라고 괄호 사이에 입력한 후 public_html 로 지정하겠다  이제 public_html 폴더 아래에 있는 모든 파일들은 app.use 즉 express 모듈의 웹서버가 구동되게함4) express 서비스가 작동될 포트 지정 보통 80번 많이씀 그리고 포트 열렸는지 확인해주기위해 콘솔을 적음app.listen에 port를 사용해주고 이건 사용되기 이전에 선언되야 하니 위에 포트 80변수를 선언해주자★ 사실 nodejs heroku를 작동시킬때 process.env.PORT || 80; 이 포트환경설정 문구가 있으면 헤로쿠에서도 작동이 잘된다.console.log 추가후 잘 작동되는지 확인해봅시다node index.js입력합시다, 잘 나온다면 아래와 같은 사진처럼 나올겁니다.이를 통해 정상적으로 app.listen이 진행되어 80번 포트가 열려있고 html서버가 express모듈을 통해 실행되면서80번 포트를 통해 제공되는걸 알 수 있습니다.app.use에 적었던 것과 같이 이제 같은 경로에 public_html 폴더 만들어줍시다, 그 폴더 안에 있는 내용이 웹서버로 서비스됨.vscode에서 ctr + n 눌러 새로운 파일을 생성후 ctr + s 눌러서 public_html 안에 index.html로 저장해주고 index.html에 ㅎㅇ루 입력한 뒤주소창에 localhost 쳐봅시다.위의 화면처럼 안나오고 혹시 아래 화면과 같이 나온다면또잉?   이유는 아래사진을 보면 나옵니다그건 node index.js가 꺼져있기 때문에 다시 틀어주면 됩니다!편한 방법으로 vscode 터미널에서 화살표 방향 윗키 누르면 그 명령어 다시 불러옵니다.이제 그러고 다시 주소창에 localhost 친곳에서 강력한 새로고침 (ctr + shirt + r) 누르면 홈페이에 ㅎㅇ루 나올겁니다.1-2   네이버 지도 api 불러오기ncloud.com -&gt; 회원가입 –&gt; 로그인 –&gt; 우측상단 콘솔검색 –&gt; naver api –&gt; 이렇게 나온다 aiㆍnaver api –&gt; application–&gt; application 등록 –&gt; 약국찾기인 경우 Maps 선택 다 선택해도 상관없는데 저의 경우는 나머지는 체크 해제하고 이거 3개만 체크하였습니다. Web dynamic Map (웹페이지에 지도를 띄우기 위함) geocoding (위도 경로 좌표를 주소로 변환) Reverse Geocoding (주소를 위도 경로로 변환) 인증정보🔑 옆에있는 수정 클릭하면 아래와 같은 사진이 보일겁니다.★참고 인증정보🔑 이거 나중에 필요합니다. 클릭하여 안에 들어가보면client id, client secret 값이 나오는데 네이버 지도를 띄울때 사용됩니다.URL란에 추가 -&gt; 등록      http://localhost이제 지도를 불러옵시다, 2가지방법중 아무거나 검색 -&gt; 네이버 지도 예제 https://navermaps.github.io/maps.js/docs/tutorial-digest.example.html지도 기본 예제 클릭후 아래로 내리면 이런 코드가 보일겁니다//지도를 삽입할 HTML 요소 또는 HTML 요소의 id를 지정합니다.var mapDiv = document.getElementById('map'); // 'map'으로 선언해도 동일//옵션 없이 지도 객체를 생성하면 서울 시청을 중심으로 하는 16 레벨의 지도가 생성됩니다.var map = new naver.maps.Map(mapDiv);html요소의 id를 넣어주면 그 id를 기반으로 네이버 지도 api가 작동한다는 내용이다.이제 index.html로 가서 내용을 수정합시다.head태그 - 디자인적인 부분은 아니지만 상단에 정의되야할 부분을 미리 정의해줌   ex) 제목, CSS부분, script(자바스크립트 부분) 등body태그 - 실제 본문&lt;html&gt; &lt;head&gt; &lt;script type =\"text/javascript\" src=\"주소\"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt;&lt;/html&gt;자 이제 주소를 찾기 위해 아까 열었던 지도 기본 예제로 갑시다 지도 기본 예제의 흰공간 –&gt; 우클릭으로 페이지소스 보기 –&gt; ctr f 로 script 검색 후 open api 내용 한줄 쭉 복사후기존 &lt;script type 부분을 없앤 후 index.html에 붙여넣기합시다그럼 아래사진처럼 됩니다id는 아까 인증정보🔑 이거 있던곳에서 저걸 클릭하여 아이디 복붙해서 바꿔주면되고submodule은 geocoder만 남겨놓으면 됩니다 geocoder는 주소 -&gt;좌표, 좌표 -&gt; 주소 를 바꿔주는 기능을 하기때문에 꼭 필요합니다여기까지 코드는 이렇게 됩니다.&lt;html&gt; &lt;head&gt; &lt;script type=\"text/javascript\" src=\"https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=보안을 위해 제 아이디 입력 안함&amp;amp;submodules=geocoder\"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt;&lt;/html&gt;이제 편의성을 위해 jquery cdn을 사용하겠습니다.구글검색 -&gt; jquery cdn2022.09.08 기준으로 제일 최신버젼인 3.x를 사용합시다 그리고 minified 클릭하면 &lt;html&gt; &lt;head&gt; &lt;script type=\"text/javascript\" src=\"https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=보안을 위해 제 아이디 입력 안함&amp;amp;submodules=geocoder\"&gt;&lt;/script&gt; &lt;script src=\"https://code.jquery.com/jquery-3.6.1.min.js\" integrity=\"sha256-o88AwQnZB+VDvE9tvIXrMQaPlFFSUTR+nldQm1LuPXQ=\"crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt;&lt;/html&gt; 이제 naver map api 그리고 그 아래줄에 제이쿼리도 활성화 됩니다. 이제 디자인적 요소를 넣기위해 body태그 안에 div객체를 만듭시다,이 div객체가 네이버지도가 들어올 곳입니다. 우선 div 객체의 id에 map으로 설정하겠습니다 스타일은 폭 100% 너비 80% 그위에 div객체 하나 더 생성해 약국지도💊 입력 후 스타일 지정해줍시다 상단여백 20픽셀, 하단여백 10픽셀, 글자 굵게 보이기 body 태그 안에 script 구문 추가 document가 ready상태일때 function(기능)을 하기위해 코드를 넣어야하는데그건 아까 지도 기본 예제에 있던 코드 복사하면 된다.&lt;head&gt; &lt;script type=\"text/javascript\" src=\"https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=보안을 위해 제 아이디 입력안함&amp;amp;submodules=geocoder\"&gt;&lt;/script&gt; &lt;script src=\"https://code.jquery.com/jquery-3.6.1.min.js\" integrity=\"sha256-o88AwQnZB+VDvE9tvIXrMQaPlFFSUTR+nldQm1LuPXQ=\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;&lt;/head&gt; &lt;body&gt; &lt;div style=\"margin-top: 20px; margin-bottom: 10px; font-weight: bold;\"&gt; 약국 지도💊 &lt;/div&gt; &lt;div id=\"map\" style=\"width:100%; height:80%\"&gt; &lt;/div&gt; &lt;/body&gt; &lt;script&gt; $(document).ready(function(){ //지도를 삽입할 HTML 요소 또는 HTML 요소의 id를 지정합니다. var mapDiv = document.getElementById('map'); // 'map'으로 선언해도 동일 //옵션 없이 지도 객체를 생성하면 서울 시청을 중심으로 하는 16 레벨의 지도가 생성됩니다. var map = new naver.maps.Map(mapDiv); }); &lt;/script&gt;이제 다시 그 localhost 홈페이지로 가서 ctr + shift + r (강력 새로고침)하면 아래처럼 지도가 빰!문제가 하나 있는데 접속한 사람의 위치에 따른 지도가 떠야하는 것이다, 위도와 경도정보를 등록합시다1) 이제 function을 하나 만들어봅시다 이름은 getLocation으로, 사용할 객체는 navigator.geolocation (gps 관련 객체)2) navigator.geolocation.getCurrentPosition 이걸 사용하면 현재 위치를 알 수 있습니다, 그 인자로function을 적고 position 이라는 객체를 통해 현 위치를 알 수 있습니다.3) getLocation은 위도, 경도 2개를 반환해야하기 때문에 미리 객체를 만들어줍시다let XY로 XY변수를 Object형으로 선언해줍시다.그리고 XY.lat, XY.lng 옵션에 각각 위도, 경도값 저장해줍시다.4) 아래엔 XY를 return해줍시다 = 현재위치의 XY좌표(위도, 경도) 반환★참고 getCurrentPosition 이게 비동기형이라 이대로 하면 문제가 됨 즉 동기형으로 바꾸어주어야 한다5) 일단 잘 작동되는지 확인하기위해 getLocation을 실행하고 거기서 return된 값을 XY로 받아 alert로 경도,위도값 띄워봅시다&lt;/body&gt; &lt;script&gt; $(document).ready(function(){ let XY = getLocation(); // 5 alert(\"위도\" + XY.lat); alert(\"경도\" + XY.lng); //지도를 삽입할 HTML 요소 또는 HTML 요소의 id를 지정합니다. var mapDiv = document.getElementById('map'); // 'map'으로 선언해도 동일 //옵션 없이 지도 객체를 생성하면 서울 시청을 중심으로 하는 16 레벨의 지도가 생성됩니다. var map = new naver.maps.Map(mapDiv); }); function getLocation() { // 1 let XY = new Object(); // 3-1 if(navigator.geolocation) { // 2 navigator.geolocation.getCurrentPosition(function(position){ //위도 position.coords.latitude //경도 position.coords.longitude XY.lat = position.coords.latitude; // 3-2 XY.lng = position.coords.longitude; }); } return XY; // 4 } &lt;/script&gt;자 이상태로 바로 localhost 보면 안 나올수도 있기때문에 vscode 종료하고 localhost홈페이지도 끄고 둘다 다시 재실행시킵시다.그러면 아래와 같은 사진과 함께 이 2문구가 나올겁니다, 위도 undefined 경도 undefined지도가 잘 나오지않는데 그 이유는 그 이유는 아까 말씀드린대로 getCurrentPosition가 비동기형이기때문입니다이제 동기형으로 바꿔주기위해 코드를 수정합시다기존 alert 2줄 위치를 XY.lat, XY.lng 아래로 옮긴 후 확인해보면 위도, 경도와 함께 지도가 잘 나옵니다 &lt;script&gt; $(document).ready(function(){ let XY = getLocation(); //지도를 삽입할 HTML 요소 또는 HTML 요소의 id를 지정합니다. var mapDiv = document.getElementById('map'); // 'map'으로 선언해도 동일 //옵션 없이 지도 객체를 생성하면 서울 시청을 중심으로 하는 16 레벨의 지도가 생성됩니다. var map = new naver.maps.Map(mapDiv); }); function getLocation() { let XY = new Object(); if(navigator.geolocation) { navigator.geolocation.getCurrentPosition(function(position){ //위도 position.coords.latitude //경도 position.coords.longitude XY.lat = position.coords.latitude; XY.lng = position.coords.longitude; alert(\"위도\" + XY.lat); alert(\"경도\" + XY.lng); }); } return XY; } &lt;/script&gt;자, function getLocation() {      여기부터는 비동기입니다 getLocation이 비동기이기 때문에,무슨 말이냐면 if 구문안의 식이 진행되다가 밑의 alert까지 읽기 전에 XY.lat에서 값을 return 할 수도 있다는 얘기입니다.ex) 휴대폰으로 햄버거세트를 10개 주문하여 주문프로그램에서 그걸 인지하고 그 주문정보를 나에게 다시 반환해주었는데정작 나의 주문량은 7개로 되어있음비동기형 -&gt; 동기형   (전환)1) function getLocation() {    앞에 async를 넣음으로써 이 function 안에 비동기구문이 있다고 표시2) getCurrentPosition을 promise 객체를 통해 재정의let XY = new Object();if(navigator.geolocation) {이곳 바로 아래에 추가 let promise = new Promise((resolve, rejected) =&gt; { navigator.geolocation.getCurrentPosition((position) =&gt;{ }); });=&gt;는 function으로 지정한 부분과 같은 역할을 수행, 그리고 getCurrentPosition이 실행될 때resolve를 적고 그 인자로 position을 적으면 getCurrentPosition을 Promise로 감싸고 또 성공했을 때position 객체를 반환하며 실패하면 rejected3) 아래에 이어서 position 변수 생성하고 선언한 후 await 합시다Promise 변수는 getCurrentPosition을 가리키며 await(끝날때까지 기다림)해줍니다.비동기가 끝나고 나면 이 position 변수에 그 값이 들어와 동기형태를 띄게됨4) let position = await promise;여기서 navigator.geolocation이 한줄없애고 맨 밑의 alert 2문장을 잠시 다른데 보관 그 후, 실행해주면 getLocaiton function이 동기식으로 변형됨= 현재의 위치를 받은 후, 동기식으로 마지막에 XY좌표값이 return됨5) 이 코드 아래에 아까 그 alert 두 문장 옮깁시다$(document).ready(function(){ `let XY = getLocation(); 6) 그리고 이제 이 getLocation 호출하는 이 function코드에도 async를 넣어주고,getLocation을 실행할때 await을 하나 더 넣어줍시다 $(document).ready(function(){ let XY = getLocation();------ —&gt; $(document).ready(async function(){ let XY = await getLocation();------여기 까지의 코드는 이렇습니다 &lt;script&gt; $(document).ready(async function(){ let XY = await getLocation(); alert(\"위도\" + XY.lat); alert(\"경도\" + XY.lng); //지도를 삽입할 HTML 요소 또는 HTML 요소의 id를 지정합니다. var mapDiv = document.getElementById('map'); // 'map'으로 선언해도 동일 //옵션 없이 지도 객체를 생성하면 서울 시청을 중심으로 하는 16 레벨의 지도가 생성됩니다. var map = new naver.maps.Map(mapDiv); }); async function getLocation() { let XY = new Object(); if(navigator.geolocation) { let promise = new Promise((resolve, rejected) =&gt; { navigator.geolocation.getCurrentPosition((position) =&gt;{ resolve(position); }); }); let position = await promise; //위도 position.coords.latitude //경도 position.coords.longitude XY.lat = position.coords.latitude; XY.lng = position.coords.longitude; } return XY; } &lt;/script&gt;이제 실행해보면 위도, 경도 값 및 네이버지도가 동기식으로 바뀌어 잘 나온다는 것을 알 수 있습니다.1-3   공공데이터 사용주소창에 data.go.kr –&gt; 로그인 –&gt; 검색 : 국립중앙의료원_전국 약국 정보 조회 서비스 –&gt; 신청\\이제 마이페이지에서 약국서비스를 선택한 후 조금 내려오면확인 -&gt; 미리보기 -&gt; 주소창 복사하여 일단 index.js에 아무곳에나 주석처리하여 보관https://apis.data.go.kr/B552657/ErmctInsttInfoInqireService/getParmacyListInfoInqire?serviceKey=mL6hpE93V2cGEHnZNYbp2kbpZIm2IFyc9rhdh2wIaUseyjghN%2FlJSV7tSchmbL47mZsX8gNcLVtGpsTxQkstdA%3D%3D&amp;Q0=%EC%84%9C%EC%9A%B8%ED%8A%B9%EB%B3%84%EC%8B%9C&amp;Q1=%EA%B0%95%EB%82%A8%EA%B5%AC&amp;QT=1&amp;QN=%EC%82%BC%EC%84%B1%EC%95%BD%EA%B5%AD&amp;ORD=NAME&amp;pageNo=1&amp;numOfRows=10이제 index.js 로 가보면 app.use를 통해 웹 서버를 열은 것을 알 수 있는데,한 페이지만 따로 app.get을 사용하여 열어봅시다, 열기위해 사용할 페이지 이름은 pharmach_list이제 “/pharmach_list” 이 경로로 접속하는 사용자들에게 자료제공 가능 참고 res(response) : node.js에서 클라이언트들에게 데이터를 보냄 req(requests) : 사용자로부터 전달받는 내용 이제 아래에 api라는 변수를 선언허 참고 api.get 역시 비동기식이라 async 입혀줍시다api로 작동시킬 모듈은 axios, get메소드를 통해 웹상의 정보를 가져옴아까 주석처리해놓은 주소를 https -&gt; http로 바꾸어 ?앞까지만 복사하여 붙입시다?뒤의 것들은 params라는 변수로 받읍시다 콤마하고 한칸 띄워서 붙이면됩니다,그리고 params는 하나가 아니라 여러개니 대괄호 처리해줍시다넣을 항목들 \"serviceKey\": \"\"       ““안에는 serviceKey= 여기 값부터 &amp;QO앞까지만 복사하여 넣으면됩니다 그리고 콤마, Q0 (2번째인자)     이곳에 넣을 정보로는 공공데이터포털 -&gt; 마이페이지 -&gt; 약국목록정보 조회 확인 클릭 Q1      Q0과 같은방법으로 – –그리고 없어도 되는 값은 넣지 않았습니다.      여기까지의 코드는 아래와 같습니다app.get(\"/pharmach_list\", (req, res) =&gt; { let api = async() =&gt; { axios.get(\"http://apis.data.go.kr/B552657/ErmctInsttInfoInqireService/getParmacyListInfoInqire\", { params: { \"serviceKey\": \"mL6hpE93V2cGEHnZNYbp2kbpZIm2IFyc9rhdh2wIaUseyjghN%2FlJSV7tSchmbL47mZsX8gNcLVtGpsTxQkstdA%3D%3D\", \"Q0\":\"서울특별시\", \"Q1\":\"강남구\", \"QT\":\"\", \"QN\":\"\", \"ORD\":\"\", \"pageNo\":\"1\", //페이지 한개에만 보겠다는 뜻 \"numOfRows\":\"1000\", // 보일 목록건수 1000개 } }) }});근데 axios.get 역시 비동기형태이기 때문에 동기형으로 바꾸어줍시다awiat를 적어주고 그 결과값을 response라는 변수로 받읍시다, 그걸 위해 그 이전에 response 변수 선언해줍시다초기값 null로 설정후 나중에 아래와같은 데이터로 받게됩니다. 그리고 마지막을return response로response 객체를 반환합니다. 그럼 이제 pharmach_list로 들어왔을 때이 api결과(serviceKey, return response 등)가 출력됨app.get(\"/pharmach_list\", (req, res) =&gt; { let response = null let api = async() =&gt; { response = await axios.get(\"http://apis.data.go.kr/B552657/ErmctInsttInfoInqireService/getParmacyListInfoInqire\", { params: {--------- return response;});그리고 위에 axios 모듈을 추가해줍시다.let axios = require(\"axios\");잠시 점검! index.js의 여기까지의 코드는 이렇습니다let express = require(\"express\"); let axios = require(\"axios\");let app = express (); let port = process.env.PORT || 80; app.use(express.static(\"public_html\")); app.listen(port,function(){ console.log(\"HTML 서버 시작됨\")})app.get(\"/pharmach_list\", (req, res) =&gt; { let response = null let api = async() =&gt; { response = await axios.get(\"http://apis.data.go.kr/B552657/ErmctInsttInfoInqireService/getParmacyListInfoInqire\", { params: { \"serviceKey\": \"mL6hpE93V2cGEHnZNYbp2kbpZIm2IFyc9rhdh2wIaUseyjghN%2FlJSV7tSchmbL47mZsX8gNcLVtGpsTxQkstdA%3D%3D\", \"Q0\":\"서울특별시\", \"Q1\":\"강남구\", \"QT\":\"\", \"QN\":\"\", \"ORD\":\"\", \"pageNo\":\"1\", \"numOfRows\":\"1000\", } }) } return response;});이제 axios모듈을 쓰겠다고 정의해주었으니npm install axios해줍시다.이어서node index.js입력하게 되면 오잉??🚨 문제 발생 에러이벤트를 핸들링하지 않았다 80번 포트가 이미 사용중이다🔑해결방법 axios모듈을 쓰면 try catch문으로 에러 핸들링을 해줍시다우선 try catch문을 만들어 try문 안에 api구문을 다 넣어주었고,이 try문에서 에러 발생시 그 에러가 catch로 오게됨, 그 예외상황이 오면 콘솔로그로 에러상황을 찍음그리고 nodejs로 api내용을 가져오는 이유는 cors보안문제를 해결하기 위함입니다..then이라고 작성해주면 이 api기능이 실행될때 오류를 잡을 수 있습니다. 약국정보 있는게 response고,res는 이 api를 사용하는 객체에게 전달해주는 값입니다, 이제 이 api를 호출하는 대상에게데이터를 남기기 위해 두번째 res변수로 res.setHeader를 지정합니다. 여기에 보면 *이 있는데 *=all앞의 allow부터 쭉 읽어보면 가능한 것들은 다 허가해줘라는 뜻입니다.이제 이 api에 접속한 대상에게 api데이터를 전달하기 위해 response.body 입력,이렇게 되면 약국데이터를 저 경로로 접속한 컴퓨터에게 제공해줍니다.코드는 이렇게 변형되었습니다app.get(\"/pharmach_list\", (req, res) =&gt; { let response = null try { let api = async() =&gt; { response = await axios.get(\"http://apis.data.go.kr/B552657/ErmctInsttInfoInqireService/getParmacyListInfoInqire\", { params: { \"serviceKey\": \"mL6hpE93V2cGEHnZNYbp2kbpZIm2IFyc9rhdh2wIaUseyjghN%2FlJSV7tSchmbL47mZsX8gNcLVtGpsTxQkstdA%3D%3D\", \"Q0\":\"서울특별시\", \"Q1\":\"강남구\", \"QT\":\"\", \"QN\":\"\", \"ORD\":\"\", \"pageNo\":\"1\", \"numOfRows\":\"1000\", } }) } api().then((response) =&gt; { res.setHeader(\"Access-Control-Allow-Origin\", \"*\") res.json(response.data.response.body); }); } catch(e) { console.log(e); } return response;}); 80번포트가 이미 사용중 에러앞서 실행중인 메모리가 콘솔에 남아있기 때문에 vscode를 껏다키면 해결됩니다.——————- 한것을 잠깐 요약해보면 ——————-index.jsexpress 모듈 - 웹서버 구현axios 모듈 - 약국 api 불러오기(이 2가지는 벡엔드 역할을 해줍니다.)index.html웹 브라우저에서 작동하는 페이지이어서 2부에서아래 사진을 클릭하면 제 취미공간으로 이어집니다 ㅎㅎ 여기에서 메모 및 일상을 기록하는데 놀러오실 분들은 언제나 환영합니다!링크로 이동하려면 사진을 클릭참고‘소스놀이터’      Node Js로 네이버 약국 지도 만들기 #1 (공공데이터포털 오픈 API 활용)‘소스놀이터’      Node.Js로 네이버 약국 지도 만들기 #2 (express &amp; axios 모듈, 비동기 문제 해결)      30:12 까지" }, { "title": "[js] three.js로 커스텀3D 물체 불러오기", "url": "/posts/threejs/", "categories": "developer-tools, html-css-js", "tags": "css, js, Node.js, html", "date": "2022-08-22 00:00:00 +0900", "snippet": " 잠깐❗ 자바스크립트를 처음 하는 분 기준으로 진행하겠습니다.저도 3일전에 처음 자바스크립트를 threejs로 바로 시작했기에 얼마나 어려운지 잘 알고 있습니다. 그렇기에 처음 시작하시는 분들은저와 같이 어려움을 겪지않고 쉽게 하시길 바라고자 이렇게 직접 블로그에 남기게 되었습니다. 그리고 저에게 정말 많은 도움을 주신 MincoMK 선생님다시 한번 감사드립니다! 확인할 것! checklist 1vs코드를 설치했는가? checklist 2Node.js를 설치하였는가? checklist 3    Node.js의 시스템변수, 환경변수를 설정하였는가? (내가 참고할 것) Node.js 설치 후 npm폴더를 만들어환경변수 C:\\Users\\rhwns\\AppData\\Roaming\\npm 시스템 변수 nodejs 설치한 경로명 (바탕화면에 nodejs1 폴더를 만들어 그안에 설치하였다)C:\\users\\rhwns\\desktop\\nodejs1\\nodejs; 1     sketchfab.com에서 먼저 gltf 파일로 다운받기 커스텀 3D물체 다운받으러가기***저는 바탕화면에 toaster 라는 폴더 생성후 그곳에 토스터 기계를 toaster라는 폴더안에 다운로드 받았어요ㅎ다운로드 받으실땐 무조건 glTF 파일로 다운로드 받아주세요. 2     threejs 모듈 생성 잠깐❗ 하시기 전 4번의 설명을 보고 하셔도 늦지 않습니다!자 저의 경우는 cmd에서 cd desktop\\toaster 통해 저의 폴더 경로로 입장한 후 아래 문구를 입력합니다npm install three그러면 이제 toaster 라는 폴더에 node_modules 라는 폴더가 생길텐데 그 안에 들어가면폴더 three이것만 toaster 폴더에 놓아두고 나머지 node_moudles 폴더 삭제합니다결과는 아래와 같이 되야합니다. 3     저 폴더 안에서 index.html 파일을 만듭시다! 치고 엔터를 쳐서 기본틀 생성합시다&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;/body&gt;&lt;/html&gt;이제 &lt;body&gt; 바로 아래에 이렇게 수정해줍시다&lt;body&gt; &lt;canvas id=\"canvas\"&gt;&lt;/canvas&gt; 4     이제 모듈 관련 입력해줍시다 ```html이 문장을 이렇게 추가하여 수정해줍시다 &lt;br&gt; &lt;br&gt; ```html &lt;canvas id=\"canvas\"&gt;&lt;/canvas&gt;&lt;script type=\"importmap\"&gt; { \"imports\": { \"three\": \"./three/build/three.module.js\", \"three/examples/jsm/loaders/GLTFLoader\":\"./three/examples/jsm/loaders/GLTFLoader.js\", \"three/examples/jsm/controls/OrbitControls\": \"./three/examples/jsm/controls/OrbitControls.js\" } }&lt;/script&gt;--------------------이 줄은 추가하지 마세요 잠시 설명을 위해 분리해놓았습니다----------------------------- &lt;script type=\"module\"&gt; import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'; import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'; import * as THREE from 'three'; 만약에 “npm install three 입력시 모듈이 너무 많아서 노트북 속도가 느려져서 다운받기 싫다!” 하시는 분들은npm install three를 입력하지않고 위에것만 쓰시면 되고나는 정석으로 가겠다 하시는 분은 npm intall three를 콘솔창에 입력하시고 아래의 구문만 쓰시면 되는데저의 경우는 npm install three를 입력하고 저 2개를 같이 배치해두니 되길래 저는 이 방법을 사용하였습니다. ※ 참고 GLTFLoader를 임포트 하겠다는 것은 GLTF사진을 가져와서 쓰겠다 뜻 OrbitControls를 임포트 하겠다는 것은 물체를 마우스로 조절할 수 있게 하겠다는 뜻 5    3D물체 기본설정이어서 아래에 붙여줍시다let [width, height] = [window.innerWidth, window.innerHeight];let aspectRatio = width / height;let canvas = document.querySelector('#canvas');Object.assign(canvas, { width, height }); 물체 보이는 높낮이에 관한 설정입니다!아래에 이어서 붙입시다let scene = new THREE.Scene(); // 3D물체 장면을 생성하기 위해 scene이라는 변수를 만들어주었다. scene.background = new THREE.Color('#ffffff'); // 배경색 설정 let light = new THREE.AmbientLight(0xffffff, 1); // 이 두문장 추가하면 물체(토스트기계)를 보이게해줌scene.add(light); let renderer = new THREE.WebGLRenderer({ // 브라우저를 켰을때 물체장면을 보여주는 함수입니다 canvas, antialias: true}); 6     카메라설정 + 마우스로 움직이게 하기 이것도 아래에 이어서 붙입시다let camera = new THREE.PerspectiveCamera(90, aspectRatio, 1, 1000); // 카메라 관점 설정 (숫자 변경을 통해 조절 가능)camera.position.set(500, 500, 500); //카메라 보이는 각도 설정 (숫자 변경을 통해 조절가능) let controls = new OrbitControls(camera, renderer.domElement); // 마우스로 움직이게 할 수 있는 기능controls.target.set(0, 0, 0); 이제 이문장을 추가해봅시다controls.autoRotate = true; // 자동회전 O 7     마무리작업let loader = new GLTFLoader();loader.load('./scene.gltf', function(gltf){ // 안에 내부 설계를 했으니 이제 뚜껑으로 덮어줘야한다 그런 비슷한 존재 scene.add(gltf.scene); (function animate() { renderer.render(scene, camera); controls.update(); //animate() 함수안에 controls.update() 추가함으로써 매프레임마다 자동으로 돌아감) requestAnimationFrame(animate); 그리고 프레임마다 조금씩 각도를 높여줌 })(); //requestAnimationFrame // 이거는 성능에 따라 프레임 수를 조절해서 몇 밀리초 뒤에 다음 프레임을 호출할지 결정 }); 완성된 index.html&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;canvas id=\"canvas\"&gt;&lt;/canvas&gt;&lt;!-- 2 이걸 적어주고 시작 --&gt;&lt;script type=\"importmap\"&gt; { \"imports\": { \"three\": \"./three/build/three.module.js\", \"three/examples/jsm/loaders/GLTFLoader\":\"./three/examples/jsm/loaders/GLTFLoader.js\", \"three/examples/jsm/controls/OrbitControls\": \"./three/examples/jsm/controls/OrbitControls.js\" } }&lt;/script&gt; &lt;script type=\"module\"&gt; import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'; import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'; import * as THREE from 'three'; let [width, height] = [window.innerWidth, window.innerHeight]; let aspectRatio = width / height; let canvas = document.querySelector('#canvas'); Object.assign(canvas, { width, height }); //3 이제 3D물체 장면을 만들자 let scene = new THREE.Scene(); scene.background = new THREE.Color('#ffffff'); //이문장 추가하면 토스터기계 보임 let light = new THREE.AmbientLight(0xffffff, 1); scene.add(light); // //4브라우저에 물체장면을 보여주소 let renderer = new THREE.WebGLRenderer({ canvas, antialias: true }); //5 카메라 ------- 아래 문장 추가 후 render.render(scene, camera) 바꿔주자 let camera = new THREE.PerspectiveCamera(90, aspectRatio, 1, 1000); camera.position.set(500, 500, 500); let controls = new OrbitControls(camera, renderer.domElement); controls.target.set(0, 0, 0); controls.autoRotate = true; //controls.autoRotate =true; 자동회전O // ------------------------- let loader = new GLTFLoader(); loader.load('./scene.gltf', function(gltf){ scene.add(gltf.scene); (function animate() { renderer.render(scene, camera); controls.update(); //animate() 함수안에 controls.update() 추가함으로써 매프레임마다 자동으로 돌아감) requestAnimationFrame(animate); //그리고 프레임마다 조금씩 각도를 높여줌 })(); //requestAnimationFrame 이거는 성능에 따라 프레임 수를 조절해서 몇 밀리초 뒤에 다음 프레임을 호출할지 결정 }); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;&lt;!-- This work is based on \"Cute Toaster\" (https://sketchfab.com/3d-models/cute-toaster-9f6d03cf29f245ad97c51a56e9b1ca90) by blkelly (https://sketchfab.com/blkelly) licensed under CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/) --&gt; 8     확인하기 저장 한번 해주고 cmd로 들어가서 원하는 경로에 들어가서 이제 입력합시다저의 경우는 cd desktop\\toaster 로 경로를 맞추고 시작하였습니다npm i http-server -g // 글로벌 http 서버를 설치하겠다npx http-server -p 8080 // 끝자리가 8080인 서버를 만들자그 후 생성된 http://127.0.0.1:8080 들어가서 ctr shift r(강력한 새로고침) 한번 눌러줍시다. 아래 사진을 클릭하면 제 취미공간으로 이어집니다 ㅎㅎ 여기에서 메모 및 일상을 기록하는데 놀러오실 분들은 언제나 환영합니다!링크로 이동하려면 사진을 클릭참고‘애플코딩’      웹 포트폴리오에 간지나게 3D 모델을 추가해보자 (Three.js)많은 도움을 주신 선생님‘MincoMK’선생님 깃허브 https://github.com/MincoMK?tab=repositories선생님 디스코드 닉네임 ! !#0123" }, { "title": "[error: failed to push some refs to] 깃 푸시 에러", "url": "/posts/git-push-error/", "categories": "etc, error", "tags": "git error", "date": "2022-08-18 00:00:00 +0900", "snippet": " 🚨문제 발생   사진 참고 git push -u origin main입력했더니 🔑내가 해결한 방법git pull origin main을 해보았더니 fatal: Couldn’t find remote ref main. Unexpected end of commands stream$git fetch origin맨 밑줄에 unrelated histories가 있다 그러면 병합해주자!git pull origin --allow-unrelated--histories그 후 git push로 해결 완료!준환과 함께 깃 명령어 알아보러 가기🤓보시고 미흡한 부분이 있다면 피드백은 언제나 환영합니다!아래 사진을 클릭하면 제 취미공간으로 이어집니다 ㅎㅎ 여기에서 메모 및 일상을 기록하는데 놀러오실 분들은 언제나 환영합니다!링크로 이동하려면 사진을 클릭" }, { "title": "[head detached at] git push가 되지않음, head detached at", "url": "/posts/git-fetch-head-detached/", "categories": "etc, error", "tags": "git error", "date": "2022-08-18 00:00:00 +0900", "snippet": " ‘공대 아로마’님의 블로그를 참고하여 작성했습니다. 🚨문제 발생   git fetch origin/main 을 한 후git push origin main후 오류가 뜸git status을 하였더니 사진과 같은 오류 사진 참고 🔑내가 해결한 방법 (저는 git 연습할 겸 빠른 해결법을 사용하지 않았습니다)git branch깃 브랜치 보유상태 확인 명령어git branch joonhwan (`준환` 브랜치 만들기) `준환` 브랜치가 없는 경우 가능 git checkout joonhwan (`준환`을 주요 브랜치로 쓰겠다) 참고 ㅎ git checkout -b joonhwan 준환을 주요 브랜치로 만들어 쓰겠다(준환 브랜치를 만들지 않은경우 가능) 이어서git branch -D candy ( candy 브랜치 제거)git branch -D water ( water 브랜치 제거)git branch -D main ( main 브랜치 제거)git branch -m joonhwan main (브랜치 joonhwan -&gt; main)git push origin main끝준환과 함께 깃 명령어 알아보러 가기🤓보시고 미흡한 부분이 있다면 피드백은 언제나 환영합니다!아래 사진을 클릭하면 제 취미공간으로 이어집니다 ㅎㅎ 여기에서 메모 및 일상을 기록하는데 놀러오실 분들은 언제나 환영합니다!링크로 이동하려면 사진을 클릭참고‘공대 아로마’    git push가 안 될 때 / detached HEAD 문제 해결 방법" }, { "title": "[git] git pull fetch 정리", "url": "/posts/git-pull-fetch/", "categories": "developer-tools, git", "tags": "git", "date": "2022-08-18 00:00:00 +0900", "snippet": " ‘공부하는 공작새’님의 블로그를 참고하여 작성했습니다. git fetch 원격저장소(깃허브 인터넷 상)에 있는 변경사항들을 로컬저장소(내 노트북)에 가져오기 전에 변경내용을 확인하고 싶은경우에 사용만약 제가 공동으로 작업하는 파일을 github에 올리고 잤어요.근데 다음날 누군가 제 파일에 수정을 했는지 안했는지 확인하고 싶을때!로컬디렉토리(내 노트북)로 변경한 내용을 가져오지 않고 변경한 내역들만 확인그 명령어가 fetch 입니다. 실험을 위해 파일을 하나 만들어봅시다!echo \"hiya it's me Joonhwan!\" &gt; yes.txt그 후 git add ~ push 를 통해 원격저장소에 올려줍시다, 이제 깃허브로 가보면이제 여기서 직접 수정해줍시다완료 후 맨 아래에 내려가서 commit changes 클릭 git fetch 원격저장소 이름저는 origin 이라서 git fetch origin 으로 했습니다그 후git fetch -r해당 명령어를 치면 fetch 확인 가능한 브랜치 내역들이 나옵니다자 저는 origin/gh-pages origin/main 2가지가 있는데 origin/main 을 선택하겠습니다.git checkout origin/main빨간 네모를 잘 봐주시고 이제 깃허브로 갑시다action을 눌러 저는 해당되는 숫자를 찾아 클릭해보니 자 원격저장소에서는 바뀌었지만 로컬저장소(내 노트북)에서는 어떨까?바로 확인해봅시다.오! git fetch는 원격저장소만 수정하고 내 로컬저장소는 수정하지 않군요.여기까지가 git fetch이고 이어서 git pull 합니다 ㅎ ❗ 잠깐 혹시 git push 하다가 오류나서 git status 쳤는데 이런 오류가 떳다면 여기를 참고해주세요 ㅎ HEAD detached at 오류 해결하러가기! git pull 이번에 깃허브로 들어가서 이렇게 고쳐봤습니다.git pull origin maingit push 여기까지 자 아까랑 똑같은 방법으로 깃허브 -&gt; action -&gt; 해당되는 숫자 클릭을하면 변화를 보실 수 있을겁니다.그 후 노트북의 그 파일을 열어보면git pull은 제 노트북의 자료도 동일화 시키네요!자 이로서 git fetch와 git pull차이를 알아보았습니다. 자료들이 도움이 됬길 바랍니다 ㅎㅎ아래 사진을 클릭하면 제 취미공간으로 이어집니다 ㅎㅎ 여기에서 메모 및 일상을 기록하는데 놀러오실 분들은 언제나 환영합니다!링크로 이동하려면 사진을 클릭참고  ‘공부하는 공작새’      git fetch pull 사용법, fetch pull 차이점 알아보기" }, { "title": "[git] git merge 정리", "url": "/posts/git-merge/", "categories": "developer-tools, git", "tags": "git", "date": "2022-08-18 00:00:00 +0900", "snippet": " 요약 원 자료에 영향을 주지않고 버그 수정이나 새로운 기능 구현을 위해서는 새로운 브랜치를 만들자 브랜치 변경 후 vim index.html로 새로운 공간을 만들어 그곳에서 작업하자 기능 구현 완료된 작업물은 다시 주요 브랜치로 변경하여 그 곳에서 하던 브랜치를 병합해주자 🎲 git merge 그림 1~8 &amp; 상황 추가     글 다음 그림결과그림 1       main 브랜치로 A3까지 작업하였다수력발전 프로그램 구현을 위해 water 브랜치 추가하여 $git branch water $git checkout water혹은 $git checkout -b water 이거 성공시 Switched to a new branch \"water\" 이렇게 나옵니다그림 2water브랜치 설정 된 상태에서 아래와 같은 명령어를 입력하면 새로운 공간을 만들어그곳에서 작업할 수 있는 환경을 조성함$vim index.html (새로운 작업공간 창조)$git commit -m \"water system checking 1\"그림 3예로 만드는 사이트에서 버그가 생기면 즉시 고쳐야한다! 근데 작업중인 water에 반영되면안되기 때문에 hurryfix브랜치를 만들어 이곳에서 해결하기 위해 다시 git checkout main으로 돌아가서$git checkout -b hurryfix생성 후 A3에 hurryfix 브랜치가 생기고 매인 브랜치로 바뀌는 동시, 이때$vim index.html$git commit -m \"hotfix locked and loaded\"입력하면 main브랜치가 있던 A3까지를 기억하는 A5를 생성해 water브랜치에서 작업하는데 방해하지 않고 버그 수정 가능하다그림 4자 이제 급한 버그 수정이 끝났으면$git checkout main$git merge hurryfix$git branch -D hurryfix그러면 이제 hurryfix 브랜치는 사라진다.그림 5hurryfix 브랜치가 삭제된 상태에서$git branch water 이제 `water` 브랜치로 바뀜$vim index.html A4까지 완료한거 영향을 안주기위해 백업해놓고 A6생성그림 6수력발전 프로그램 구현 완료후 이제 main 브랜치에 병합을 시키자$git checkout main (main으로 매인브랜치 변경)$git merge water (water 브랜치 내용을 병합하겠다)그림 7이제 water브랜치는 지워도 무방그림 8`아래 사진을 클릭하면 제 취미공간으로 이어집니다 ㅎㅎ 여기에서 메모 및 일상을 기록하는데 놀러오실 분들은 언제나 환영합니다!링크로 이동하려면 사진을 클릭참고   ‘git 공식홈페이지’      3.2 Git 브랜치 - 브랜치와 Merge 의 기초" }, { "title": "[error src refspec main does not match any] 깃에러2", "url": "/posts/git-error-src/", "categories": "etc, error", "tags": "git error", "date": "2022-08-17 00:00:00 +0900", "snippet": " 🚨문제 발생 사진 참고 해당 오류는 깃허브에서 pull 없이 push할 경우 기존 내용을 삭제하거나 하는 문제가 생길 수 있기 때문에,에러 메세지를 발생시키는 것.     🔑내가 해결한 방법$git clone \"나의 깃허브 리포 주소\" $git init$git branch -m main$git remote add origin \"나의 깃허브 리포 주소\" $git add .$git commit -m \"first commit\"$git push origin main저는 이렇게 해결하였습니다!준환과 함께 깃 명령어 알아보러 가기🤓보시고 미흡한 부분이 있다면 피드백은 언제나 환영합니다!아래 사진을 클릭하면 제 취미공간으로 이어집니다 ㅎㅎ 여기에서 메모 및 일상을 기록하는데 놀러오실 분들은 언제나 환영합니다!링크로 이동하려면 사진을 클릭" }, { "title": "[git error no commits updated] 파일 업로드가 안됨", "url": "/posts/none-uploaded/", "categories": "etc, error", "tags": "git error", "date": "2022-08-17 00:00:00 +0900", "snippet": "❗ 주의사항 저의 개인적인 경험으로 해결됬으므로 꼭 100% 정답이라고 할 수는 없습니다. 🚨문제 발생 로컬 저장소에서 git push했는데 원격저장소에 업로드가 되지않는다!!. 🔑내가 해결한 방법 git branch 이걸 통해 아래와 같이 확인 *master main git branch -D main (main 브랜치 제거)git branch -m master maingit add ~ push깃허브 홈페이지에 들어가보니 결과는 성공! 파일이 업로드가 되었다!준환과 함께 깃 명령어 알아보러 가기🤓보시고 미흡한 부분이 있다면 피드백은 언제나 환영합니다!아래 사진을 클릭하면 제 취미공간으로 이어집니다 ㅎㅎ 여기에서 메모 및 일상을 기록하는데 놀러오실 분들은 언제나 환영합니다!링크로 이동하려면 사진을 클릭" }, { "title": "[git error untracted files] untracted files", "url": "/posts/git-untracted-files/", "categories": "etc, error", "tags": "git error", "date": "2022-08-17 00:00:00 +0900", "snippet": " 🚨문제 발생 사진 참고 🔑내가 해결한 방법 경로를 맞춘 뒤 git add 파일명 혹은 폴더명 git add -u 혹시 이래도 계속 untracted files 뜨면❗ 꼭 백업용 폴더 하나 만들 것 ❗ 무조건 경로가 맞춰져있나 다시 확인 또 재차 확인 git clean -f     (내 원격저장소의 untracted files 제거) 이래도 안되면 바로 아래 방법을 쓰고 백업용 폴더 활용 git clean -fd (untracted files도 제거, 내 노트북의 파일도 자동 제거)2번째 방법이 위험한게 실수로 작업중인 커밋안된 파일 및 폴더를 날리기 때문에그래서 백업폴더를 준비하라고 한 것입니다.아무튼 전 이런 방법을 통해 해결하였습니다! 준환과 함께 깃 명령어 알아보러 가기🤓보시고 미흡한 부분이 있다면 피드백은 언제나 환영합니다!아래 사진을 클릭하면 제 취미공간으로 이어집니다 ㅎㅎ 여기에서 메모 및 일상을 기록하는데 놀러오실 분들은 언제나 환영합니다!링크로 이동하려면 사진을 클릭" }, { "title": "[fatal: remote origin already exists 그리고 다른 하나 fatal 'origin' does not appear to be a git repository fatal Could not read from remote repository] 깃 푸시 오류", "url": "/posts/git-fatal-remote-exist/", "categories": "etc, error", "tags": "git error", "date": "2022-08-17 00:00:00 +0900", "snippet": "❗ 2가지 오류 및 해결방법을 작성하였습니다 fatal: remote origin already exists fatal ‘origin’ does not appear to be a git repository fatal Could not read from remote repository 🚨문제 발생 1fatal: remote origin already exists연결오류라고 하니 자 이제 기존 연결을 끊고 재연결을 해봅시다. 🔑내가 해결한 방법 1git remote rm origin (기존 연결 끊기)git remote add origin 깃 리포 주소 입력git remote -v (잘 연결되었나 확인)git push origin main 🚨문제 발생 2fatal 'origin' does not appear to be a git repository fatal Could not read from remote repository깃 리포로 부터 읽을 수 없다 ? 🔑내가 해결한 방법 2git remote add origin \"https://github.com/joonhwan2/joonhwan2.github.io.git\"git clone \"https://github.com/joonhwan2/joonhwan2.github.io.git\"git pull origin maingit push origin main★ 깃 클론명령어 사용 후 폴더는 현재 위치한 경로에 생성될 건데     생성된 폴더는 삭제해도 무방함.준환과 함께 깃 명령어 알아보러 가기🤓보시고 미흡한 부분이 있다면 피드백은 언제나 환영합니다!아래 사진을 클릭하면 제 취미공간으로 이어집니다 ㅎㅎ 여기에서 메모 및 일상을 기록하는데 놀러오실 분들은 언제나 환영합니다!링크로 이동하려면 사진을 클릭    " }, { "title": "[git deleted error] deleted by them X", "url": "/posts/git-deleted/", "categories": "etc, error", "tags": "git error", "date": "2022-08-17 00:00:00 +0900", "snippet": " 🚨문제 발생 사진 참고 🔑내가 해결한 방법 git add -u     (= update track file 최신화 하겠다) git commit -m \"아무거나 치세요\" git push git rm --cached -r . (로컬저장소에 자료 남겨두고 원격저장소에 있는 자료만 삭제하겠다)= 내 노트북의 폴더 자료 살리고, 깃허브 인터넷상 자료만 삭제할께 ㅎ git commit -m \"아무거나 치세요\" git push 그후 git add ~ push 를 통해 복구를 하여 해결하였습니다.준환과 함께 깃 명령어 알아보러 가기🤓보시고 미흡한 부분이 있다면 피드백은 언제나 환영합니다!아래 사진을 클릭하면 제 취미공간으로 이어집니다 ㅎㅎ 여기에서 메모 및 일상을 기록하는데 놀러오실 분들은 언제나 환영합니다!링크로 이동하려면 사진을 클릭" }, { "title": "[git error] 블로그 업데이트X", "url": "/posts/no-update/", "categories": "etc, error", "tags": "blog, jekyll, github, git", "date": "2022-08-16 00:00:00 +0900", "snippet": "❗ 주의사항 저의 개인적인 경험으로 해결됬으며 해결 방법이 2가지가 있으니 시작하시기 전 먼저 한번 읽으시는걸 추천드립니다. 🚨문제 발생 사진 참고 후후 좋아 업데이트 내역이나 확인해볼까 ㅎ_ㅎ오잉 ??여기로 들어오는법 (우선 본인 깃허브로)action을 누르면빨간 네모를 누르면 어떤 파일을 올렸는지 알 수 있고,     노란색을 누르면 아래 사진으로 가집니다.자 둘중에 하나를 눌러 조금 내리다 보면은 이런 에러들 중 하나가 나올겁니다 제가 본건 일단 이 2개입니다 HTML-Proofer found 1 failure!Error: Process completed with exit code 1. could not locate Gemfile or .bundle/ directoryError: Process completed with exit code 10.ruby cmd로 가서빠진게 있나 확인할 수 있는 명령어 &amp; 오류도 찾아줍니다!$jekyll build --verbose이걸 보고 관련된 파일들을 열어서 고치면 대박인데 이런 저런 다양한 방법을 강구해보았지만 저는 찾지 못했습니다그래서 결국 생각해낸 결론이 분명 내가 파일 및 폴더를 지우면서 관련된 자료가 소실됬구나! 라는 생각이 들더군요. 🔑내가 사용한 해결 방법 1 1vs코드 Ruby Jekyll 싹 지우고 재설치. 2`github desktop’ 들어가니 클론이 풀려있어서 다시 재등록 3CMD에서 git clone “repo주소”      재등록 ※ git clone 쓰면 선택된 경로로 github.io 폴더 생김cd 원하는경로    들어간 후git rm --cached .한 후에 다시 업로드시켜서 결과를 보니 성공! 진작 삭제하고 재설치할걸 그랬다.이것때문에 장작 7시간은 날린거같은데 ㅎㅎ. 🚨문제 재발생아나#@%$^%&amp;.. 🔑내가 사용한 해결 방법 2먼저 ruby cmd를 켜서 아래와 같은 명령어를 입력$jekyll build --verbose그 후 오류나는 파일을 찾아 수정, 그래도 안될 경우 내가 사용한 테마(jekyll theme chirpy)를 다시 다운받아 수정해가면서 루비 cmd 로컬서버에서테스트도 해보면서 맞춰가며 새로 파일을 업로드 하였더니 드디어 해결되었다.이것 때문에 정작 이틀정도 블로그활동을 하지 못하였다. 이제서야 해결이라니..보시고 미흡한 부분이 있다면 피드백은 언제나 환영합니다!아래 사진을 클릭하면 제 취미공간으로 이어집니다 ㅎㅎ 여기에서 메모 및 일상을 기록하는데 놀러오실 분들은 언제나 환영합니다!링크로 이동하려면 사진을 클릭문제 해결에 도움을 주신 분들‘J1mmyson’    https://j1mmyson.github.io/‘sserbe-kr’    https://github.com/sserve-kr         https://projects.sserve.work/contact" }, { "title": "[blog] 블로그 카테고리 나누는 법", "url": "/posts/categories-dividing/", "categories": "blog", "tags": "blog, jekyll, github, git", "date": "2022-08-16 00:00:00 +0900", "snippet": "🤔카테고리를 어떻게 하면 나눌 수 있을까?음 뭔가 깔끔해보이지가 않아..이걸 카테고리별로 묶기위해 1시간 정도 시행착오를 겪은 후 드디어 방법을 찾았다!. 방법! ①_post 안에 폴더를 만들어 md파일을 카테고리별로 추가 ②md파일의 카테고리 부분 수정 ③재 업로드 저는 이렇게 하였습니다.그리고 해당되는 md폴더를 열어서 categories를 고치면 됩니다 제꺼를 한번 보여드리겠습니다.categories: [상위폴더명, 하위폴더명] 이렇게 적으신다면 카테고리 설정이 됩니다.git push 후 결과를 확인해보면?짜잔✅보시고 미흡한 부분이 있다면 피드백은 언제나 환영합니다!아래 사진을 클릭하면 제 취미공간으로 이어집니다 ㅎㅎ 여기에서 메모 및 일상을 기록하는데 놀러오실 분들은 언제나 환영합니다!링크로 이동하려면 사진을 클릭" }, { "title": "[git] git add ~ push", "url": "/posts/git-add/", "categories": "developer-tools, git", "tags": "git", "date": "2022-08-15 00:00:00 +0900", "snippet": " 잠깐! 필요한 것 깃 다운로드ㄱㄱ ★ 작업전 백업용 폴더 하나 만들어놓고 작업하는 걸 추천합니다. 잘못하면 파일 날라가요 ㅋㅋ.git add ~ push 를 시작하기 전 간단하게 원리를 설명드리고 시작하겠습니다. git add ~ push 로컬저장소에 있는 제 파일 및 폴더를 git add~push로 콘솔창(cmd나 vscode의 터미널을 뜻함)에 입력하여원격저장소에 저장하는 것입니다.만약? 원격저장소에는 있는데 로컬저장소에 없다면 어떻게 해야하는가?그때는 원격저장소에서 파일을 pull(다운로드)하여 로컬저장소에 저장하고 작업을 시작하시면 됩니다.만약 원격저장소에 파일 1, 2 이있고 로컬저장소인 내 노트북에 파일 1이 있는상태에서 파일 3을 올리려 하는데 이상태에서git add~push 하면 100% 오류납니다.(원격저장소의 파일들 = 로컬저장소내노트북 파일들) 이렇게 동일한 상태에서내 노트북에 파일 +a 로 더있다면 그건 git add~push 하는데 문제 없습니다.이제 이럴땐 어떡하느냐? 아래 git pull을 봐주세요 ㅎ git pull 원격 저장소의 자료를 요청해 내 노트북의 자료에 적용시켜 원격 저장소의 자료와 동일화 시킴\\ ex) 원격저장소에 자료 1, 2, 3, 4 있고 로컬저장소(내 노트북)엔 자료 5가 있는데자료 5를 git add하고 싶으면 cd 경로명\\경로명2\\?로 경로 설정을 한 뒤git pull을 해서 원격저장소로부터 없는 파일 1,2,3,4 를 끌어오고 난 뒤 5를 업로드 가능합니다. 확인할 것! checklist 1백업용 폴더를 준비해놓고 작업을 시작하는가? checklist 2원격저장소에는 파일이 없지만 로컬저장소에는 그곳에 보낼 파일이 존재하는가? 확인 완료 ㅎ_ㅎ이제 깃허브 초기설정에 관해 알아보겠습니다. 먼저 원하는 경로에 들어오셔서 작업해야합니다.예를들어 제가 바탕화면의 joonhwan 이라는 폴더에서 작업하고싶다면※ 참 입력할때 $는 빼야합니다 ㅎ (혹시 모르실 분들을 위해 적었습니다.)$ cd desktop\\joonhwan$ git config --global user.name \"유저명\"$ git config --global user.email \"이메일 기입\"$ git remote -v (리포 설정유무 확인) #혹시 clone설정이 되있는데 초기화 하고싶다면 git init 입력$ git clone \"리포 주소\"리포주소 찾는 방법입니다이어서$ git status # 커밋 가능한 파일들을 보여줌$ git add 파일명 혹은 git add . (이건 그 폴더안의 전체 파일 업로드)$ git commit -m \"아무거나 적으면 됨\"$ git branch # main 이나 master 둘중에 하나일텐데$ git push origin main # main일 경우$ git push origin master # master인경우 번외 git add . 했는데 특정 파일을 빼고싶다?      git reset 파일명 커밋 메시지 변경    git commit --amend 최신 파일 커밋을 없애고싶다       git reset --hard git add 취소       git reset HEAD 파일명 혹은 git reset HEAD 폴더명/ git commit 취소       git reset --soft HEAD^        (예전에 커밋한 staged상태로 돌아감,   hard땐 전 커밋내용으로 돌아감.)git reset HEAD~2    마지막 2개 커밋 취소 git pull, merge 충돌시 취소git reset --merge ORIG_HEAD git reset –hard 로 코드가 다날라갔다면?       git reflog 입력 후 git reset --hard HEAD@{돌아갈 n번째 숫자 입력} 브랜치를 변경하자       git branch -m 기존브랜치 새로운브랜치     예시) git branch -m master main 파일 및 폴더 삭제       git rm 파일명 혹은 폴더명 (본인의 노트북, 원격저장소에 있는 것 둘다 삭제)git rm --cached -r 폴더명/     혹은 git rm --cached -r 파일명 (본인 노트북에 자료는 살려두고 원격저장소의 자료만 삭제) 대소문자 신경X        git config core.ignorecase true deleted된 파일이 많다?     git add -u (u = update 최신화 하겠다) 깃허브 다른 작업물 올리고 싶을때     git remote -v 어떤 리포에 등록되있는지 확인git remote rm origin 잠시 제거git init 초기화git remote add origin 깃리포주소` 아래 사진을 클릭하면 제 취미공간으로 이어집니다 ㅎㅎ 여기에서 메모 및 일상을 기록하는데 놀러오실 분들은 언제나 환영합니다!링크로 이동하려면 사진을 클릭참고‘Outsider’s Dev Story’      git이 추적하지 않는 untracked files 한꺼번에 삭제하기‘noyo0123.log’      git 명령어 정리, 에러정리‘gmlwjd9405’     [Git] git add 취소하기, git commit 취소하기, git push 취소하기" }, { "title": "[md] 나만의 마크다운 문법 정리", "url": "/posts/md/", "categories": "developer-tools, md", "tags": "md", "date": "2022-08-14 00:00:00 +0900", "snippet": "‘dev scroll’님의 블로그를 참고하여 작성했습니다. 시작하기 앞서 혹시 모르시는 분들을 위해 vs코드내에서 프리마크뷰가 있습니다.extension 으로 가서 Dark Github Markdown Pack 검색해서 나오는 문어 다운로드 받으면됩니다.사용법은 ctr + shift + p 를 눌러 markdown preview 검색해서 쓰면되는데 저는 여기서 사진이 나오지 않기에 깃허브 프리뷰를 사용중입니다.써보시고 편한쪽으로 하시면 될 것 같아요참! typora도 검색해서 다운합시다마크다운문법 자동교정기입니다★참고 &amp;nbsp;         칸을 띄우는데 쓴다1 헤더 h1은 = 3개h2는 - 3개# 는 6개까지 가능 이건 H1===이건H2--- 이건 H1이건H2—# 이거 H1## 이거 H2### 이거 H3#### 이거 H4##### 이거 H5###### 이거 H6이거 H1이거 H2이거 H3이거 H4이거 H5이거 H62 줄 긋기 또는 * 또는 _ 3개이상 작성* * *********- - - (하이픈)------------------- (하이픈)___ (언더하이픈)_ _ _ (언더하이픈)3 강조_어서오게나 ㅎ_ (이건 기울임체)**어서오게 ㅎ_ㅎ** (이건 굵게)~~오늘 하루는 좋군 ㅎ_ㅎ~~ (이건 줄 그음)_오늘 하루는 ~~정말~~ **보람찬** 하루로군!_어서오게나 ㅎ어서오게 ㅎ_ㅎ오늘 하루는 좋군 ㅎ_ㅎ오늘 하루는 정말 보람찬 하루로군!4 인용구 그리고 정렬&gt;로 시작 &gt;는3개까지 가능정렬:&gt; 1번 &gt; 1번&gt; &gt; 2번&gt; &gt; &gt; 3번정렬: 1번 1번 2번 3번 &gt; # 주말에 할 것!&gt; * list&gt; `운동`&gt; * list&gt; `맛있는거 먹으러 가기` 주말에 할 것! list운동 list맛있는거 먹으러 가기 5 리스트 목록*, +, - 를 이용해서 순서가 없는 목록을 만들 수 있습니다* 고 * 준 * 환 + 고 + 준 + 환 * ㅎ - 고- 준- 환 고 준 환 고 준 환 ㅎ 고 준 환1. 돈까스의 역사 1. 옛날의 돈까스 2. 요즘의 돈까스 2. 돈까스 만드는 법3. 돈까스의 미래 1. 전문가들의 견해 &lt;!-- 번호안에서 또 번호를 생성하려면 tab과 함꼐 숫자 1번 서부터 --&gt; 2. 나의 생각 돈까스의 역사 옛날의 돈까스 요즘의 돈까스 돈까스 만드는 법 돈까스의 미래 전문가들의 견해 나의 생각 6 \\를 특수문자 앞에 붙이면 특수문자가 살려짐* 고- 고 \\* 고 \\- 고\\#고\\# 고 고* 고- 고#고#7 이미지 &amp; 링크![텍스트](이미지파일경로.jpg)![텍스트](이미지파일URL)![텍스트](이미지파일경로.jpg \"이미지이름\")![텍스트](이미지파일URL \"이미지이름\")[![텍스트](이미지URL)](링크URL)&lt;img src=\"https://m.chuing.net/mai/img_character_main/18/409698201428.jpg\" width=\"200\" height=\"200\" /&gt;![Desktop View](/assets/img/2022-08-14/1.PNG)[텍스트](링크URL)&lt;링크URL&gt;##내부(해시) 링크[보여지는 내용](#이동할 헤드(제목))괄호 안의 링크를 쓸 때는 띄어쓰기는 -로 연결, 영어는 모두 소문자[4 인용구 &amp; 정렬 바로가기](#4-인용구-&amp;-정렬)&lt;a href=\"#\"&gt;\t&lt;img src=\"https://m.chuing.net/mai/img_character_main/18/409698201428.jpg\" width=\"100px\" alt=\"sample image\"&gt;&lt;/a&gt;사진은 마지막꺼에 관한 내용이다4 인용구 &amp; 정렬 가자!\t8 코드블럭`혹은 ~~~ 코드, `을 쓴 후 겉을 ~~~로 덮어주었다위의 사진처럼 작성하면 아래와 같이 된다.```pythonclass music(commands.Cog): def __init__(self, bot:discord.Bot): self.bot = bot print(\"Cog loaded music\")```class music(commands.Cog): def __init__(self, bot:discord.Bot): self.bot = bot print(\"Cog loaded music\")```yamltitle: 고준환 tagline: '어서오시게'```title: 고준환 tagline: '어서오시게'9 체크리스트- [x] 월요일 피자몰 ㄱㄱ- [ ] 화요일 피자몰 ㄱㄱ 월요일 피자몰 ㄱㄱ 화요일 피자몰 ㄱㄱ- [x] @고준환, #참고, [links](), **개미**, and &lt;del&gt;오늘은 통닭이다&lt;/del&gt; @고준환, #참고, links, 개미, and 오늘은 통닭이다10 표 하이픈 그리고 (shift + \\) 가 필요1조|2조|3조|4조---|---|---|---김|1|a|☆이|2|b|★박|3|c|○ 1조 2조 3조 4조 김 1 a ☆ 이 2 b ★ 박 3 c ○ 1조|2조|3조:---|:---:|---:Left|Center|Right김|1|a이|2|b박|3|c 1조 2조 3조 Left Center Right 김 1 a 이 2 b 박 3 c | Company | Contact | Country ||:-----------------------------|:-----------------|--------:|| Alfreds Futterkiste | Maria Anders | Germany || Island Trading | Helen Bennett | UK || Magazzini Alimentari Riuniti | Giovanni Rovelli | Italy | Company Contact Country Alfreds Futterkiste Maria Anders Germany Island Trading Helen Bennett UK Magazzini Alimentari Riuniti Giovanni Rovelli Italy 11 수식$$ \\sum_{n=1}^\\infty 1/n^2 = \\frac{\\pi^2}{6} $$\\(\\sum_{n=1}^\\infty 1/n^2 = \\frac{\\pi^2}{6}\\)When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are$$ x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a} $$When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are\\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\]아래 사진을 클릭하면 제 취미공간으로 이어집니다 ㅎㅎ 여기에서 메모 및 일상을 기록하는데 놀러오실 분들은 언제나 환영합니다!링크로 이동하려면 사진을 클릭참고‘Dev Scroll’      [MarkDown] 📚 마크다운 문법 💯 총정리 - 어렵지 않아요‘jekyll-theme-chirpy homepage’https://chirpy.cotes.page/posts/text-and-typography/" }, { "title": "[blog] 깃허브 블로그 구글검색 노출시키기", "url": "/posts/google-search-engine/", "categories": "blog", "tags": "blog, jekyll, github, git", "date": "2022-08-14 00:00:00 +0900", "snippet": "google search console 들어가기—※eona1301님의 블로그를 참고하여 작성합니다.google search console 바로가기이 곳을 들어간 후 시작을 누릅시다.그러면 이 화면으로 바뀝니다.이제 여기 주소를 입력해주시면 됩니다. 저의 경우는 https://joonhwan2.github.io그리고 계속을 누르면저거 클릭해서 깃허브 블로그 폴더와 같은 경로에 저장합시다이제 sitemap.xml을 열면&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;urlset xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd\" xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"&gt;&lt;url&gt;&lt;loc&gt;http://localhost:4000/posts/text-and-typography&lt;/loc&gt;&lt;lastmod&gt;2019-08-08T12:33:00+09:00&lt;/lastmod&gt;&lt;/url&gt; &lt;url&gt;&lt;loc&gt;http://localhost:4000/posts/write-a-new-post&lt;/loc&gt;&lt;lastmod&gt;2019-08-08T15:10:00+09:00&lt;/lastmod&gt;&lt;/url&gt; &lt;url&gt;&lt;loc&gt;http://localhost:4000/posts/getting-started&lt;/loc&gt;&lt;lastmod&gt;2019-08-09T21:55:00+09:00&lt;/lastmod&gt; ~~~~~~~~~ 이런식으로 나오는데 https://localhost:4000 이라고 적힌 부분을 모두 교체해줍니다. 한 20개 조금 넘습니다.저의 경우는 https://joonhwan2.github.io 로 하였습니다.이제 robot.txt를 열읍시다.(robot.txt 역할은 사이트 페이지를 검색 결과에 포함시킬지 여부를 검색 엔진에 알립니다.)User-agent: *allow: /Sitemap: https://joonhwan2.github.io/sitemap.xml내용이 disallow 라고 되있는 분들도 계실텐데 저처럼 바꿔주시면 됩니다.밑에 주소적고 꼭 /sitemap.xml도 붙여야합니다 ㅎ다 되셨다면 이제 git add~push 를 통해 깃허브에 업로드 해주시면 됩니다.이제 google search console 홈페이지로 돌아와서 왼쪽에 보면 sitemaps 라고 있는데 이 곳에서 sitemap.xml 을 입력합니다. 그리고 제출을 합시다이제 이런 문구가 뜨면 성공입니다. 구글에 반영되는건 짧으면 1~2일 길면 몇일 더 걸린다하니일단 테스트는 후에 해볼 예정입니다 ㅎ아래 사진을 클릭하면 제 취미공간으로 이어집니다 ㅎㅎ 여기에서 메모 및 일상을 기록하는데 놀러오실 분들은 언제나 환영합니다!링크로 이동하려면 사진을 클릭참고‘eona1301’      [Github Blog] 검색창 노출시키기" }, { "title": "[blog] 깃허브 블로그 만드는 법 3", "url": "/posts/last/", "categories": "blog", "tags": "blog, jekyll, github, git", "date": "2022-08-13 00:00:00 +0900", "snippet": "3-1 _config.yml 열어서 수정theme: jekyll-theme-chirpy # import하는 테마 명, 바꾸지 말 것!baseurl: '' #사용자 페이지를 만든 경우 공란, 프로젝트 페이지를 만든 경우 프로젝트 명 기입avatar: /assets/img/icon.jpg #원하는 경로로 변경timezone: Asia/Seoultitle: 고준환 #블로그 맨 상단에 설정된 이름 확인가능tagline: '어서오시게' #(부제목 첫 페이지 좌측에서 확인가능)url: 'https://joonhwan2.github.io'#깃허브 주소 적으면됨github: username: joonhwan2 # 깃허브 이름 바꾸면 될듯name: #아무거나email: #이메일links: #여기 밑에는 필요하신분들만img_cdn: '' #공란으로 둬야 나중에 프사가 잘 나옵니다avatar: /assets/img/icon.jpg #프사 경로 설정후 하시면 됩니다toc: true (블로그에 포스팅 옆에서 스크롤을 따라오는 목차) #사용 true 미사용 false완료후 ruby cmd로 테스트를 해보고 됬다싶으면 git add~push 를 하거나폴더를 깃허브 리포에 마우스로 드래그하여 업로드 후에1 -&gt; 2 -&gt; 3번째에서 gh-page로 설정해 준 후에 4번을 봤을 때deployed by github pages 라고 나오면 성공입니다.그리고 이거 연동되는데 시간이 조금 걸렸네요 저는 5분 뒤에https://joonhwan2.github.io 제 주소를 홈페이지에 쳐보니 들어가졌습니다.번외편 이어서 합니다!3-2 글 업로드가 안된다?? 참고합시다!※devyuseon님의 블로그를 참고하여 작성합니다._posts 에 .md파일을 추가후 git add ~ push까지 완료했는데     오잉👀  뭐냐?처음에는 몰라서 헤맸는데 다행히 이 오류에 관한 블로그를 찾았다 ㅎ자 _config.yml로 들어와서 이 2문장을 추가해봅시다futrue: true # 미래의 포스팅을 보이게 하는 설정published: true # publised 공개/비공개 설정그리고 로컬 서버로 확인하거나, git add~push해본 뒤 다시 홈페이지를 들어가면오오 ! 글 올리기 오류 해결V3-3 댓글 기능하얀눈길님의 블로그를 참고하였습니다._config.yml로 들어와서provider: utterence #댓글기능인데 저는 disqus와 utterence중 2번째걸로 했습니다comments: true #사용 true 미사용 false그 후, 이것을 클릭해보세요아래와 같이 나올겁니다이제 저것을 클릭합니다.저는 이미 완료했기에 아래처럼 joonhwan2/joonhwan2.github.io로 나옵니다여러분들은 select repositories 클릭해서 연동시켜주시면 됩니다 ㅎ그리고 조금 내려가시다 보면 아래와 같은 화면이 나옵니다저가 한 형식과 똑같이 그대로 적어주시면 됩니다. 그리고 조금 밑으로 내려가다보면Enable Utterances&lt;script src=\"https://utteranc.es/client.js\" repo=\"joonhwan2/joonhwan2.github.io\" issue-term=\"url\" theme=\"github-light\" crossorigin=\"anonymous\" async&gt;&lt;/script&gt;이게 나오는데 여기서 repo내용 맞는지 확인해주시고 맞으면 copy버튼 클릭합니다._layouts/post.html 이제 이 경로로 들어가서 맨 아랫부분에 아까 그 코드 붙여넣기 하시면됩니다.&lt;/div&gt;&lt;!-- div.post-tail-wrapper --&gt;&lt;!-- 댓글기능 삽입 --&gt;&lt;script src=\"https://utteranc.es/client.js\" repo=\"joonhwan2/joonhwan2.github.io\" issue-term=\"url\" theme=\"github-light\" crossorigin=\"anonymous\" async&gt;&lt;/script&gt;자 이제 ruby cmd를 켜서 bundle exec jekyll serve 이 명령어를 콘솔창에 입력해봅시다.오 잘나오구만! 이것으로 이제 끝입니다 ㅎㅎ 참 파비콘도 있는데 이건 쉬워서 그냥 링크만 놔둘께요 favicon 변경하기asset\\image\\favicon 이 경로로 들어가시면 답 나옵니다. 이제 진짜 끝ㅎ!아래 사진을 클릭하면 제 취미공간으로 이어집니다 ㅎㅎ 여기에서 메모 및 일상을 기록하는데 놀러오실 분들은 언제나 환영합니다!링크로 이동하려면 사진을 클릭참고‘dodev’      초보자를 위한 GitHub Blog 만들기 - 3‘devyuseon’      [Github Blog] 깃허브 블로그 포스팅 게시 안됨 해결‘하얀눈길’    Jekyll 테마에 utterances 댓글 연동하기" }, { "title": "[blog] 깃허브 블로그 만드는 법 2", "url": "/posts/github-blog-creating2/", "categories": "blog", "tags": "blog, jekyll, github, git", "date": "2022-08-13 00:00:00 +0900", "snippet": "2-1 jekyll 그리고 Ruby 설치지킬테마 다운로드저는 jekyll-chirpy-theme 을 사용하였습니다.👉저가 사용한 테마를 다운받으시려면 이곳을 클릭 해주세요ㅎ제가 사용한 테마를 다운받으시려는 분들은 들어가면 지금부터 저 화면이 나올겁니다.빨간색을 클릭하면code를 눌러 downloadzip을 통해 일단 찾기 쉽게 저장해두는 것을 권장합니다. 저는 바탕화면에 저장 후 진행하였습니다.이제 루비를 다운로드 해보겠습니다.        💎루비 다운로드 하기들어가면 이제 바로 아래와 같은 화면이 나올 겁니다무조건 with devkit과 있는 것을 다운로드 해주셔야하며, 저의 경우에는 2.7을 다운받았습니다맨 처음에 3.1을 받았는데 오류가생겨 재설치하였습니다.저거 체크 안하면 조금 피곤해집니다, 꼭 체크합시다ㅎ이제 진행되다보면 이 화면이 뜰텐데 엔터 한번씩 눌러주고 저의 경우에는 혹시나 몰라서 1,2,3 을 각각 순차적으로 한번씩 더 눌러주었습니다.1,2,3을 각각 눌렀을때 아래와 같은 문구가 뜨면 성공그 후 엔터를 누르면 자동으로 꺼집니다.자 이제 바탕화면에서 windows를 눌러 ruby 검색후 ruby cmd 클릭루비가 잘 설치되었나 확인하기위해$ruby -v입력해보자       (혹시나 모르시는 분들을 위해, %는 빼고 입력입니다!)이렇게 뜨면 설치가 잘 되었다는 뜻이다.이어서$gem install jekyll bundler$gem install webrick$cd 원하는 경로로 이동저의 경우에는 cd desktop을 입력하여 C:\\Users\\rhwns\\Desktop&gt; 이상태로 만든 후jekyll new 폴더명 아무거나저는 yes로 했습니다.자 이렇게 폴더가 생성된 것을 확인할 수 있습니다.$cd 폴더경로로 이동$bundle install $bundle exec jekyll serve이렇게 해보고 오류가 떠서 안된다면$bundle update$bundle add webrick$bundle exec jekyll serve그래도 안되면 gem update –system을 콘솔창에 입력한 뒤 처음부터 전부 싹 다 해봅시다.$gem update --system (살짝 오래걸림 이것만)$gem install jekyll bundler$gem install webrick$bundle install$bundle update$bundle add webrick$bundle exec jekyll serve빠진게 있나 확인할 수 있는 명령어 &amp; 오류도 찾아줍니다!$jekyll build --verbose성공한다면 이런창이 뜹니다.serer address 부분에 저거를 복사하여 주소창에 입력해보면자 이제 거의 다와갑니다!      조금만 더 힘 냅시다.아까 다운로드 해놓았던 테마안의 파일 전부다 jekyll new ? 로 생성한 그 폴더에 전부다 복사하여 붙여넣습니다덮어쓰기O2-2 지울 것.travis.yml_posts 폴더 안의 파일들만.github폴더 안에서, workflows폴더를 제외한 나머지.github폴더 &gt; workflows폴더에서 ci.yml 그리고 issue-pr-interceptor.yml 그리고 commitlint.yml 이 3개 삭제gemfile.lock asset폴더의 404.html 건드리지말고!, 바깥에 있는 404.html 제거 .gitignore 에 gemfile.lock 제거 그리고 본인의 컴퓨터가 리눅스가 아니라면 입력합시다 $bundle lock --add-platform x86_64-linux※수정할 것.github&gt;workflows&gt;pages-deploy.yml.hook 여기서 .hook을 지우고파일명을 .github&gt;workflows&gt;pages-deploy.yml으로 바꿔줍시다(옵션)그리고 깔지 않고싶은 것이 있다면 gitignore 파일을 열어 적고 수정합시다그 후 해당 파일을 열어 branch 부분을 수정합시다.name: 'Automatic build' on: push: branches: - master # 이 부분 master -&gt; main paths-ignore: - .gitignore - README.md - LICENSE 보통 여기서 완료하고 되는 분들도 있겠지만 저의 경우엔 되지않았습니다. 이 상태에서 로컬 서버를 열기 위한 명령어를 입력 했더니$bundle exec jekyll serve이 사단이 납니다.2-3 🧐자 어떻게 해결하느냐?우선 vs코드로 들어가서 확장(extension)에서 category:formatters yaml 검색을 하고 다운로드gemfile을 열어 수정을 하다보면 안보이던 빨간밑줄(오류)가 생겨나기 시작할 것이다.이걸 다운로드 받지않은게 문제였다, 그로 인해 시간이 정말 오래걸렸다.이건 제가 쓴 방법입니다.gemfile에서 첫번째 문장인 # frozen_string_literal: true 이것을 없애고 3번째 문장에 있던 거를 1번째로 올려준다gempec도 지운다gem \"webrick\", \"~&gt; 1.7\"이제 이 문장 밑에 이 문구를 복붙합시다, 그리고 저장gem \"jekyll\"# This is the default theme for new Jekyll sites. You may change this to anything you like.gem \"jekyll-theme-chirpy\"gem 'jekyll-sitemap'# If you want to use GitHub Pages, remove the \"gem \"jekyll\"\" above and# uncomment the line below. To upgrade, run `bundle update github-pages`.# gem \"github-pages\", group: :jekyll_plugins# If you have any plugins, put them here!group :jekyll_plugins do gem \"jekyll-feed\", \"~&gt; 0.12\"end이제 이걸 치면$bundle exec jekyll serve 또 로컬 주소가 생성이될텐데 아까 그거 복사해서 주소에 붙여넣으면 짜잔다음글 이어서 마지막 수정 및 추가편 작성합니다ㅎ여기까지 완료하는데 많은 도움을 주셨던 https://github.com/nyannyacha 선생님 감사드립니다!아래 사진을 클릭하면 제 취미공간입니다 ㅎㅎ 여기에서 메모 및 일상을 기록하는데 놀러오실 분들은 언제나 환영합니다!링크로 이동하려면 사진을 클릭많은 도움을 주신 분—https://github.com/nyannyacha참고‘dodev’      초보자를 위한 GitHub Blog 만들기 - 3https://chirpy.cotes.page/posts/getting-started" }, { "title": "[blog] 깃허브 블로그 만드는 법 1", "url": "/posts/creating-githubblog/", "categories": "blog", "tags": "blog, jekyll, github, git", "date": "2022-08-12 00:00:00 +0900", "snippet": " 이번에 깃허브 블로그를 만들었던 방법을 공유하려고 합니다!.전 꽤 힘들게하고 오래 걸렸지만 이 글을 읽는 분들은 전와 같은 전철을 밟지않고 쉽고빠르게 완성하셨으면 좋겠어요ㅎ.이글은 windows환경 기준으로 작성합니다.시작하기 앞서 필요한 것시작하기 앞서 vscode, git, github desktop 이 3개중 하나라도 없으시다면 설치를 하는걸 권장함.글을 클릭하면 링크로 이동, 알맞은 비트에 맞게 다운받으면 됨, 필자는 64비트라 그걸 다운받음.1. VScode 다운로드2. 깃 다운로드3. 깃허브 다운로드여기까지 완료했다면 15%는 따라온 겁니다, 아주 잘하고 있습니다!!. 이제부터 본론으로 들어갑니다.1-1 깃허브로 들어가기reposistory를 눌러 new를 누른 후 이 화면이 뜰텐데여기서 반드시 왼쪽의 ‘owner 명’과 동일하게 작성할 것, 그렇지 않은 경우엔 오류가 날 겁니다!.틀은 {owner *}.github.io 가 됩니다. 그리고 create repository를 누르면 생성이 됨그게 자신의 깃허브 주소가 될 거에요. 제 경우에는 joonhwan2.github.io1-2 github desktop으로 갑시다이걸 누르면 이 화면이 뜹니다자, 여기서 이제 깃허브 홈페이지로 돌아갑시다우측에 보이는 코드를 눌러 거기 나오는 주소를 복사한 뒤 github desktop으로 돌아가 입력하고 clone(다운로드) 하면어떤 코드가 뜨면서 완료됬다고 할 겁니다.여기까지 하였으면 이제 vs코드로 index.html 파일을 만들어 깃허브에 아까 reposistory한 곳에 올려봅시다, 내용은 이렇게&lt;html&gt;\t&lt;body&gt;\t\t오 이것이 바로 나의 홈페이지로군!\t&lt;/body&gt;&lt;/html&gt;이제 저 빨간 부분을 복사하여 주소창에 쳐보면 어떤 변화가 나타날 거에요!.이번 글은 여기서 시마이입니다.아래 사진을 클릭하면 제 취미공간입니다 ㅎㅎ 여기에서 메모 및 일상을 기록하는데 놀러오실 분들은 언제나 환영합니다!링크로 이동하려면 사진을 클릭참고‘dodev’ 초보자를 위한 GitHub Blog 만들기 - 1" }, { "title": "메모", "url": "/posts/first-post/", "categories": "etc, daily", "tags": "blog, jekyll, github, git", "date": "2022-08-11 00:00:00 +0900", "snippet": "고준환안녕하세요 ㅎㅎ 드디어 첫글이네요, 블로그에 있던 일반 방법으로 안되서 여기까지 한다고 한동안 정말 잠도 잘 못 잤는데 드디어 성공하였어요!이 블로그를 만들 수 있도록 도와주신 선생님들 다시 한번 감사드립니다!아래 사진을 클릭하면 제 취미공간으로 이어집니다 ㅎㅎ 여기에서 메모 및 일상을 기록하는데 놀러오실 분들은 언제나 환영합니다!링크로 이동하려면 사진을 클릭" } ]
